;; Object elisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "elisp/"
  :tables (list 
   (semanticdb-table "backpack.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("rest-api" include nil nil [2008 2027]) ("url" include nil nil [2074 2088]) ("xml" include nil nil [2138 2152]) ("url-http-end-of-headers" variable nil nil [2212 2244]) ("defgroup" code nil nil [2276 2707]) ("backpack-username" variable nil nil [2709 2807]) ("backpack-api-key" variable nil nil [2809 2905]) ("put" code nil nil [2944 2997]) ("put" code nil nil [2998 3061]) ("backpack-check-error" function (:arguments ("response")) nil [3063 3497]) ("backpack-debug" variable nil nil [3499 3526]) ("backpack-response" function (:arguments ("buffer")) nil [3528 3949]) ("backpack-request" function (:arguments ("path" "&optional" "payload")) nil [3951 4934]) ("put" code nil nil [4936 4983]) ("backpack-parse-lists-list" function (:arguments ("lists")) nil [5053 5583]) ("backpack-parse-items-list" function (:arguments ("items-element")) nil [5585 6604]) ("backpack-parse-notes-list" function (:arguments ("notes-element")) nil [6606 7589]) ("backpack-parse-pages-list" function (:arguments ("pages-element")) nil [7591 9654]) ("backpack-parse-tags-list" function (:arguments ("tags-element")) nil [9656 10265]) ("backpack-parse-reminders-list" function (:arguments ("reminders-element")) nil [10267 11164]) ("backpack-parse-emails-list" function (:arguments ("emails-element")) nil [11166 12191]) ("backpack-api-define" function (:arguments ("call" "args" "payload-args" "docstring" "&optional" "payload")) nil [12257 12935]) ("put" code nil nil [12937 12987]) ("put" code nil nil [12988 13032]) ("backpack-api/pages/all" function nil nil [13054 13259]) ("backpack-api/page" function (:arguments ("page-id")) nil [13274 13461]) ("backpack-api-define" code nil nil [13463 13559]) ("backpack-api-define" code nil nil [13561 13703]) ("backpack-api-define" code nil nil [13705 13848]) ("backpack-api/page/duplicate" function (:arguments ("page-id")) nil [13850 14042]) ("backpack-api-define" code nil nil [14044 14197]) ("backpack-api-define" code nil nil [14199 14356]) ("backpack-api-define" code nil nil [14358 14664]) ("backpack-api-define" code nil nil [14666 14782]) ("backpack-api-define" code nil nil [14784 14866]) ("backpack-api/page/items/list" function (:arguments ("page-id" "&optional" "list-id")) nil [14921 15265]) ("backpack-api/page/items/add" function (:arguments ("page-id" "content" "&optional" "list-id")) nil [15267 15685]) ("backpack-api-define" code nil nil [15687 15880]) ("backpack-api-define" code nil nil [15882 16006]) ("backpack-api-define" code nil nil [16008 16108]) ("backpack-api-define" code nil nil [16110 16268]) ("backpack-api/page/lists/add" function (:arguments ("page-id" "name")) nil [16283 16546]) ("backpack-api-define" code nil nil [16548 16700]) ("backpack-api/page/lists/list" function (:arguments ("page-id")) nil [16702 16954]) ("backpack-api-define" code nil nil [16956 17057]) ("backpack-api/page/notes/list" function (:arguments ("page-id")) nil [17072 17312]) ("backpack-api/page/notes/create" function (:arguments ("page-id" "title" "&optional" "body")) nil [17314 17724]) ("backpack-api-define" code nil nil [17726 17975]) ("backpack-api-define" code nil nil [17977 18134]) ("backpack-api/tags/select" function (:arguments ("tag-id")) nil [18148 18391]) ("backpack-api-define" code nil nil [18430 18627]) ("backpack-api/reminders" function nil nil [18646 18850]) ("backpack-api/reminders/create" function (:arguments ("content" "&optional" "remind-at")) nil [18852 19214]) ("backpack-api-define" code nil nil [19216 19493]) ("backpack-api-define" code nil nil [19495 19609]) ("backpack-api/page/emails/list" function (:arguments ("page-id")) nil [19625 19840]) ("backpack-api/page/emails/show" function (:arguments ("page-id" "email-id")) nil [19842 20123]) ("backpack-api-define" code nil nil [20125 20248]) ("backpack-api/account/export" function nil nil [20265 20658]) ("backpack-pages" variable nil nil [20669 20750]) ("backpack-pages" function (:arguments ("&optional" "invalidate-cache")) nil [20752 21155]) ("backpack-last-page" variable nil nil [21157 21224]) ("backpack-read-page" function nil nil [21226 21449]) ("backpack-remind" function (:user-visible-flag t :arguments ("what")) nil [21451 21679]) ("backpack-remind-from-region" function (:user-visible-flag t :arguments ("start" "end")) nil [21681 21861]) ("backpack" package nil nil [21989 22008]))
    :file "backpack.el"
    :pointmax 22035
    )
   (semanticdb-table "browse-kill-ring.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("cl" include nil nil [8184 8197]) ("derived" include nil nil [8200 8218]) ("when" code nil nil [8221 8267]) ("browse-kill-ring-depropertize-string" function (:arguments ("str")) nil [8269 8467]) ("cond" code nil nil [8469 9152]) ("defgroup" code nil nil [9154 9339]) ("browse-kill-ring-display-styles" variable (:default-value (quote ((separated . browse-kill-ring-insert-as-separated) (one-line . browse-kill-ring-insert-as-one-line)))) nil [9341 9490]) ("browse-kill-ring-display-style" variable (:default-value (quote separated)) nil [9492 9841]) ("browse-kill-ring-quit-action" variable (:default-value (quote bury-and-delete-window)) nil [9843 10814]) ("browse-kill-ring-resize-window" variable nil nil [10816 11300]) ("browse-kill-ring-separator" variable (:default-value "-------") nil [11302 11491]) ("browse-kill-ring-recenter" variable nil nil [11493 11655]) ("browse-kill-ring-highlight-current-entry" variable nil nil [11657 11825]) ("browse-kill-ring-highlight-inserted-item" variable (:default-value browse-kill-ring-highlight-current-entry) nil [11827 12034]) ("browse-kill-ring-separator-face" variable (:default-value (quote bold)) nil [12036 12195]) ("browse-kill-ring-maximum-display-length" variable nil nil [12197 12537]) ("browse-kill-ring-display-duplicates" variable (:default-value t) nil [12539 12693]) ("kill-new" function (:arguments ("around" "browse-kill-ring-no-kill-new-duplicates")) nil [12695 13072]) ("browse-kill-ring-no-duplicates" variable nil nil [13074 13910]) ("browse-kill-ring-depropertize" variable nil nil [13912 14216]) ("browse-kill-ring-hook" variable nil nil [14218 14354]) ("browse-kill-ring-original-window-config" variable nil nil [14356 14477]) ("make-variable-buffer-local" code nil nil [14478 14547]) ("browse-kill-ring-original-window" variable nil nil [14549 14758]) ("browse-kill-ring-mouse-insert" function (:user-visible-flag t :arguments ("e")) nil [14760 15090]) ("if" code nil nil [15092 15820]) ("browse-kill-ring-resize-window" function nil nil [15822 16169]) ("browse-kill-ring-undo-other-window" function (:user-visible-flag t) nil [16171 16488]) ("browse-kill-ring-insert" function (:user-visible-flag t :arguments ("&optional" "quit")) nil [16490 16811]) ("browse-kill-ring-insert-and-delete" function (:user-visible-flag t :arguments ("&optional" "quit")) nil [16813 17177]) ("browse-kill-ring-insert-and-quit" function (:user-visible-flag t) nil [17179 17349]) ("browse-kill-ring-insert-and-move" function (:user-visible-flag t :arguments ("&optional" "quit")) nil [17351 17769]) ("browse-kill-ring-insert-move-and-quit" function (:user-visible-flag t) nil [17771 17953]) ("browse-kill-ring-prepend-insert" function (:user-visible-flag t :arguments ("&optional" "quit")) nil [17955 18259]) ("browse-kill-ring-prepend-insert-and-quit" function (:user-visible-flag t) nil [18261 18444]) ("browse-kill-ring-prepend-insert-and-move" function (:user-visible-flag t :arguments ("&optional" "quit")) nil [18446 18906]) ("browse-kill-ring-prepend-insert-move-and-quit" function (:user-visible-flag t) nil [18908 19114]) ("browse-kill-ring-do-prepend-insert" function (:arguments ("buf" "pt")) nil [19116 19948]) ("browse-kill-ring-append-insert" function (:user-visible-flag t :arguments ("&optional" "quit")) nil [19950 20242]) ("browse-kill-ring-append-insert-and-quit" function (:user-visible-flag t) nil [20244 20424]) ("browse-kill-ring-append-insert-and-move" function (:user-visible-flag t :arguments ("&optional" "quit")) nil [20426 20883]) ("browse-kill-ring-append-insert-move-and-quit" function (:user-visible-flag t) nil [20885 21088]) ("browse-kill-ring-do-append-insert" function (:arguments ("buf" "pt")) nil [21090 21948]) ("browse-kill-ring-delete" function (:user-visible-flag t) nil [21950 22919]) ("browse-kill-ring-current-string" function (:arguments ("buf" "pt")) nil [22921 23153]) ("browse-kill-ring-do-insert" function (:arguments ("buf" "pt")) nil [23155 23927]) ("browse-kill-ring-forward" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [23929 25349]) ("browse-kill-ring-previous" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [25351 25503]) ("browse-kill-ring-read-regexp" function (:arguments ("msg")) nil [25505 25848]) ("browse-kill-ring-search-forward" function (:user-visible-flag t :arguments ("regexp" "&optional" "backwards")) nil [25850 26734]) ("browse-kill-ring-search-backward" function (:user-visible-flag t :arguments ("regexp")) nil [26736 26976]) ("browse-kill-ring-quit" function (:user-visible-flag t) nil [26978 27568]) ("put" code nil nil [27570 27619]) ("define-derived-mode" code nil nil [27620 29698]) ("browse-kill-ring-default-keybindings" function (:user-visible-flag t) nil [29715 30625]) ("define-derived-mode" code nil nil [30627 31000]) ("browse-kill-ring-edit-target" variable nil nil [31002 31043]) ("make-variable-buffer-local" code nil nil [31044 31102]) ("browse-kill-ring-edit" function (:user-visible-flag t) nil [31104 31897]) ("browse-kill-ring-edit-finish" function (:user-visible-flag t) nil [31899 32491]) ("browse-kill-ring-add-overlays-for" function (:arguments ("item" "&rest" "body")) nil [32493 32877]) ("browse-kill-ring-elide" function (:arguments ("str")) nil [32947 33260]) ("browse-kill-ring-insert-as-one-line" function (:arguments ("items")) nil [33262 33766]) ("browse-kill-ring-insert-as-separated" function (:arguments ("items")) nil [33768 34006]) ("browse-kill-ring-insert-as-separated-1" function (:arguments ("origitem" "separatep")) nil [34008 34416]) ("browse-kill-ring-occur" function (:user-visible-flag t :arguments ("regexp")) nil [34418 34787]) ("browse-kill-ring-fontify-on-property" function (:arguments ("prop" "face" "beg" "end")) nil [34789 35349]) ("browse-kill-ring-fontify-region" function (:arguments ("beg" "end" "&optional" "verbose")) nil [35351 35740]) ("browse-kill-ring-update" function (:user-visible-flag t) nil [35742 36024]) ("browse-kill-ring-setup" function (:arguments ("buf" "window" "&optional" "regexp" "window-config")) nil [36026 38556]) ("browse-kill-ring" function (:user-visible-flag t) nil [38573 38978]) ("browse-kill-ring" package nil nil [38980 39007]))
    :file "browse-kill-ring.el"
    :pointmax 39043
    )
   (semanticdb-table "psvn.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("easymenu" include nil nil [8802 8821]) ("dired" include nil nil [8842 8858]) ("ediff-util" include nil nil [8879 8900]) ("elp" include nil nil [8921 8935]) ("pp" include nil nil [8956 8969]) ("condition-case" code nil nil [8972 9045]) ("svn-psvn-revision" variable (:constant-flag t :default-value "$Id: psvn.el 24298 2007-03-31 19:10:08Z xsteve $") nil [9047 9159]) ("svn-status-verbose" variable (:user-visible-flag t :default-value t) nil [9188 9286]) ("svn-log-edit-file-name" variable (:user-visible-flag t :default-value "++svn-log++") nil [9287 9503]) ("put" code nil nil [9504 9557]) ("svn-log-edit-insert-files-to-commit" variable (:user-visible-flag t :default-value t) nil [9558 9698]) ("svn-log-edit-use-log-edit-mode" variable (:user-visible-flag t :default-value (and (condition-case nil (require (quote log-edit)) (error nil)) t)) nil [9699 9951]) ("svn-log-edit-paragraph-start" variable (:user-visible-flag t :default-value "$\\|[ 	]*$\\|##.*$\\|\\*.*:.*$\\|[ 	]+(.+):.*$") nil [9952 10152]) ("svn-log-edit-paragraph-separate" variable (:user-visible-flag t :default-value "$\\|##.*$") nil [10153 10318]) ("svn-status-hide-unknown" variable (:user-visible-flag t) nil [10319 10511]) ("svn-status-hide-unmodified" variable (:user-visible-flag t) nil [10512 10713]) ("svn-status-sort-status-buffer" variable (:user-visible-flag t :default-value t) nil [10714 11022]) ("svn-status-changelog-style" variable (:user-visible-flag t :default-value (quote changelog)) nil [11024 11443]) ("svn-status-unmark-files-after-list" variable (:user-visible-flag t :default-value (quote (commit revert))) nil [11445 11687]) ("svn-status-preserve-window-configuration" variable (:user-visible-flag t :default-value t) nil [11689 11822]) ("svn-status-auto-revert-buffers" variable (:user-visible-flag t :default-value t) nil [11824 11952]) ("svn-status-negate-meaning-of-arg-commands" variable (:user-visible-flag t :default-value (quote nil)) nil [11954 12278]) ("svn-status-svn-executable" variable (:user-visible-flag t :default-value "svn") nil [12280 12519]) ("put" code nil nil [12520 12576]) ("svn-status-default-export-directory" variable (:user-visible-flag t :default-value "~/") nil [12578 12714]) ("svn-status-svn-environment-var-list" variable (:user-visible-flag t :default-value (quote ("LANG=C"))) nil [12716 13224]) ("put" code nil nil [13225 13291]) ("svn-browse-url-function" variable nil nil [13293 15038]) ("svn-status-window-alist" variable (:default-value (quote ((diff "*svn-diff*") (log "*svn-log*") (info t) (blame t) (proplist t) (update t)))) nil [15139 16123]) ("svn-status-short-mod-flag-p" variable (:user-visible-flag t :default-value t) nil [16125 16787]) ("svn-status-debug-level" variable nil nil [16789 16992]) ("svn-bookmark-list" variable nil nil [16994 17095]) ("svn-status-buffer-name" variable (:default-value "*svn-status*") nil [17207 17286]) ("svn-process-buffer-name" variable (:default-value "*svn-process*") nil [17287 17369]) ("svn-log-edit-buffer-name" variable (:default-value "*svn-log-edit*") nil [17370 17455]) ("svn-status-use-header-line" variable (:user-visible-flag t :default-value (if (boundp (quote header-line-format)) t (quote inline))) nil [17457 17954]) ("svn-status-default-log-arguments" variable (:user-visible-flag t :default-value (quote nil)) nil [18076 18281]) ("put" code nil nil [18282 18345]) ("svn-status-default-commit-arguments" variable (:user-visible-flag t :default-value (quote nil)) nil [18347 18792]) ("put" code nil nil [18793 18859]) ("svn-status-default-diff-arguments" variable (:user-visible-flag t :default-value (quote nil)) nil [18861 19129]) ("put" code nil nil [19130 19194]) ("svn-trac-project-root" variable nil nil [19196 19343]) ("svn-status-module-name" variable (:user-visible-flag t) nil [19345 19475]) ("svn-status-branch-list" variable (:user-visible-flag t) nil [19477 19938]) ("svn-status-load-state-before-svn-status" variable (:user-visible-flag t :default-value t) nil [19940 20084]) ("svn-status-mode-hook" variable nil nil [20096 20173]) ("svn-log-edit-mode-hook" variable nil nil [20174 20255]) ("svn-log-edit-done-hook" variable nil nil [20256 20333]) ("svn-post-process-svn-output-hook" variable nil nil [20486 20661]) ("when" code nil nil [20663 20774]) ("svn-status-coding-system" variable nil nil [20776 20937]) ("svn-status-svn-file-coding-system" variable (:default-value (quote undecided-unix)) nil [20939 21204]) ("svn-status-use-ido-completion" variable (:user-visible-flag t :default-value (fboundp (quote ido-completing-read))) nil [21206 21351]) ("svn-status-completing-read-function" variable (:default-value (if svn-status-use-ido-completion (quote ido-completing-read) (quote completing-read))) nil [21353 21472]) ("svn-status-track-user-input" variable nil nil [21500 21652]) ("svn-status-refresh-info" variable nil nil [21654 21764]) ("defgroup" code nil nil [21786 21857]) ("defgroup" code nil nil [21859 21915]) ("cl" include nil nil [21938 21951]) ("svn-xemacsp" variable (:constant-flag t :default-value (featurep (quote xemacs))) nil [21954 21995]) ("if" code nil nil [21998 22068]) ("svn-status-display-full-path" variable nil nil [22071 22275]) ("svn-status-prefix-key" variable (:default-value [(control x) (meta s)]) nil [22277 22835]) ("svn-admin-default-create-directory" variable (:user-visible-flag t :default-value "~/") nil [22837 22988]) ("svn-status-custom-hide-function" variable nil nil [22990 23151]) ("add-to-list" code nil nil [23333 23412]) ("svn-status-directory-history" variable nil nil [23437 23521]) ("svn-process-cmd" variable nil nil [23522 23550]) ("svn-status-info" variable nil nil [23551 23579]) ("svn-status-filename-to-buffer-position-cache" variable (:default-value (make-hash-table :test (quote equal) :weakness t)) nil [23580 23676]) ("svn-status-base-info" variable nil nil [23677 23757]) ("svn-status-initial-window-configuration" variable nil nil [23758 23810]) ("svn-status-default-column" variable (:default-value 23) nil [23811 23848]) ("svn-status-default-revision-width" variable (:default-value 4) nil [23849 23893]) ("svn-status-default-author-width" variable (:default-value 9) nil [23894 23936]) ("svn-status-line-format" variable (:default-value " %c%c%c %4s %4s %-9s") nil [23937 23991]) ("svn-start-of-file-list-line-number" variable nil nil [23992 24037]) ("svn-status-files-to-commit" variable nil nil [24038 24193]) ("svn-status-recursive-commit" variable nil nil [24194 24349]) ("svn-log-edit-update-log-entry" variable nil nil [24350 24495]) ("svn-status-pre-commit-window-configuration" variable nil nil [24496 24551]) ("svn-status-pre-propedit-window-configuration" variable nil nil [24552 24609]) ("svn-status-head-revision" variable nil nil [24610 24647]) ("svn-status-root-return-info" variable nil nil [24648 24688]) ("svn-status-property-edit-must-match-flag" variable nil nil [24689 24742]) ("svn-status-propedit-property-name" variable nil nil [24743 24844]) ("svn-status-propedit-file-list" variable nil nil [24845 24887]) ("svn-status-mode-line-process" variable nil nil [24888 24928]) ("svn-status-mode-line-process-status" variable nil nil [24929 24976]) ("svn-status-mode-line-process-edit-flag" variable nil nil [24977 25027]) ("svn-status-edit-svn-command" variable nil nil [25028 25068]) ("svn-status-update-previous-process-output" variable nil nil [25069 25123]) ("svn-pre-run-asynch-recent-keys" variable nil nil [25124 25167]) ("svn-pre-run-mode-line-process" variable nil nil [25168 25210]) ("svn-status-temp-dir" variable (:default-value (expand-file-name (or (when (boundp (quote temporary-file-directory)) temporary-file-directory) (when (fboundp (quote temp-directory)) (file-name-as-directory (temp-directory))) "/tmp/"))) nil [25211 25645]) ("svn-temp-suffix" variable (:default-value (make-temp-name ".")) nil [25791 25836]) ("put" code nil nil [25837 25883]) ("svn-status-temp-file-to-remove" variable nil nil [25884 25927]) ("put" code nil nil [25928 25989]) ("svn-status-temp-arg-file" variable (:default-value (concat svn-status-temp-dir "svn.arg" svn-temp-suffix)) nil [25990 26078]) ("put" code nil nil [26079 26134]) ("svn-status-options" variable nil nil [26135 26166]) ("svn-status-remote" variable nil nil [26167 26193]) ("svn-status-commit-rev-number" variable nil nil [26194 26235]) ("svn-status-update-rev-number" variable nil nil [26236 26277]) ("svn-status-operated-on-dot" variable nil nil [26278 26317]) ("svn-status-last-commit-author" variable nil nil [26318 26360]) ("svn-status-elided-list" variable nil nil [26361 26396]) ("svn-status-get-specific-revision-file-info" variable nil nil [26397 26448]) ("svn-status-last-output-buffer-name" variable nil nil [26449 26586]) ("svn-status-pre-run-svn-buffer" variable nil nil [26587 26629]) ("svn-status-update-list" variable nil nil [26630 26665]) ("svn-transient-buffers" variable nil nil [26666 26696]) ("svn-ediff-windows" variable nil nil [26697 26723]) ("svn-ediff-result" variable nil nil [26724 26749]) ("svn-status-last-diff-options" variable nil nil [26750 26791]) ("svn-admin-last-repository-dir" variable nil nil [26792 26884]) ("svn-last-cmd-ring" variable (:default-value (make-ring 30)) nil [26885 27000]) ("svn-status-cached-version-string" variable nil nil [27001 27046]) ("svn-client-version" variable nil nil [27047 27122]) ("svn-status-get-line-information-for-file" variable nil nil [27123 27176]) ("svn-status-base-dir-cache" variable (:default-value (make-hash-table :test (quote equal) :weakness nil)) nil [27177 27256]) ("svn-status-partner-buffer" variable nil nil [27258 27345]) ("make-variable-buffer-local" code nil nil [27346 27401]) ("ediff-buffer-A" variable nil nil [27610 27633]) ("ediff-buffer-B" variable nil nil [27634 27657]) ("ediff-buffer-C" variable nil nil [27658 27681]) ("ediff-quit-hook" variable nil nil [27682 27706]) ("log-edit-initial-files" variable nil nil [27734 27765]) ("log-edit-callback" variable nil nil [27766 27792]) ("log-edit-listfun" variable nil nil [27793 27818]) ("ediff-after-quit-destination-buffer" variable nil nil [28018 28062]) ("svn-status-marked-face" variable (:default-value (quote ((((type tty) (class color)) (:foreground "green" :weight light)) (((class color) (background light)) (:foreground "green3")) (((class color) (background dark)) (:foreground "palegreen2")) (t (:weight bold))))) nil [28639 28992]) ("svn-status-marked-popup-face" variable (:default-value (quote ((((type tty) (class color)) (:foreground "green" :weight light)) (((class color) (background light)) (:foreground "green3")) (((class color) (background dark)) (:foreground "palegreen2")) (t (:weight bold))))) nil [28994 29346]) ("svn-status-update-available-face" variable (:default-value (quote ((((type tty) (class color)) (:foreground "magenta" :weight light)) (((class color) (background light)) (:foreground "magenta")) (((class color) (background dark)) (:foreground "yellow")) (t (:weight bold))))) nil [29348 29821]) ("svn-status-directory-face" variable (:default-value (quote ((((type tty) (class color)) (:foreground "lightblue" :weight light)) (((class color) (background light)) (:foreground "blue4")) (((class color) (background dark)) (:foreground "lightskyblue1")) (t (:weight bold))))) nil [29851 30260]) ("svn-status-filename-face" variable (:default-value (quote ((((class color) (background light)) (:foreground "chocolate")) (((class color) (background dark)) (:foreground "beige"))))) nil [30295 30607]) ("svn-status-symlink-face" variable (:default-value (quote ((((class color) (background light)) (:foreground "cornflower blue")) (((class color) (background dark)) (:foreground "cyan"))))) nil [30655 31056]) ("svn-status-locked-face" variable (:default-value (quote ((t (:weight bold :foreground "Red"))))) nil [31091 31264]) ("svn-status-switched-face" variable (:default-value (quote ((((class color) (background light)) (:foreground "CadetBlue")) (((class color) (background dark)) (:foreground "Aquamarine")) (t (:bold t :italic t))))) nil [31306 31629]) ("svn-highlight" variable (:default-value t) nil [31631 31655]) ("svn-add-face" function (:arguments ("str" "face" "&optional" "keymap")) nil [31679 32384]) ("svn-status-maybe-add-face" function (:arguments ("condition" "text" "face")) nil [32386 32566]) ("svn-status-choose-face-to-add" function (:arguments ("condition" "text" "face1" "face2")) nil [32568 32778]) ("svn-status-maybe-add-string" function (:arguments ("condition" "string" "face")) nil [32780 32977]) ("defalias" code nil nil [33008 33100]) ("defalias" code nil nil [33101 33199]) ("defalias" code nil nil [33200 33310]) ("if" code nil nil [33333 33387]) ("defalias" code nil nil [33389 33457]) ("if" code nil nil [33471 33938]) ("if" code nil nil [34156 34410]) ("if" code nil nil [34876 36191]) ("svn-global-keymap" variable nil nil [36207 36334]) ("put" code nil nil [36335 36383]) ("when" code nil nil [36384 37492]) ("svn-status-diff-mode-map" variable nil nil [37494 37631]) ("put" code nil nil [37632 37687]) ("when" code nil nil [37705 38121]) ("svn-global-trac-map" variable nil nil [38123 38229]) ("put" code nil nil [38230 38280]) ("when" code nil nil [38297 38929]) ("defalias" code nil nil [39263 39310]) ("put" code nil nil [39379 39503]) ("svn-wc-adm-dir-name" function nil nil [39553 39756]) ("svn-log-edit-file-name" function (:arguments ("&optional" "curdir")) nil [39758 40080]) ("svn-status-message" function (:arguments ("level" "&rest" "args")) nil [40082 40468]) ("svn-status-flatten-list" function (:arguments ("list")) nil [40470 40687]) ("svn-status-window-line-position" function (:arguments ("w")) nil [40689 40940]) ("svn-checkout" function (:user-visible-flag t :arguments ("repos-url" "path")) nil [40957 41245]) ("defalias" code nil nil [41298 41333]) ("svn-status" function (:user-visible-flag t :arguments ("dir" "&optional" "arg")) nil [41350 42778]) ("svn-status-display-new-status-buffer" variable nil nil [42780 42829]) ("svn-status-1" function (:arguments ("dir" "&optional" "arg")) nil [42830 44531]) ("svn-status-this-directory" function (:user-visible-flag t :arguments ("arg")) nil [44533 44678]) ("svn-status-use-history" function (:user-visible-flag t) nil [44680 45470]) ("svn-had-user-input-since-asynch-run" function nil nil [45472 45579]) ("svn-process-environment" function nil nil [45581 46466]) ("svn-run" function (:arguments ("run-asynchron" "clear-process-buffer" "cmdtype" "&rest" "arglist")) nil [46468 51108]) ("svn-process-sentinel-fixup-path-seperators" function nil nil [51110 51434]) ("svn-process-sentinel" function (:arguments ("process" "event")) nil [51436 58650]) ("svn-process-filter" function (:arguments ("process" "str")) nil [58652 59721]) ("svn-revert-some-buffers" function (:user-visible-flag t :arguments ("&optional" "tree")) nil [59723 60842]) ("svn-parse-rev-num" function (:arguments ("str")) nil [60844 61000]) ("svn-status-make-ui-status" function nil nil [61002 62060]) ("svn-status-make-dummy-dirs" function (:arguments ("dir-list" "old-ui-information")) nil [62062 62341]) ("svn-status-make-line-info" function (:arguments ("&optional" "path" "ui" "file-mark" "prop-mark" "local-rev" "last-change-rev" "author" "update-mark" "locked-mark" "with-history-mark" "switched-mark" "locked-repo-mark")) nil [62343 63394]) ("svn-user-names-including-blanks" variable nil nil [63396 63488]) ("svn-status-parse-fixup-user-names-including-blanks" function nil nil [63653 64464]) ("svn-parse-status-result" function nil nil [64466 72365]) ("svn-status-sort-predicate" function (:arguments ("a" "b")) nil [72459 72739]) ("svn-status-remove-temp-file-maybe" function nil nil [72741 73149]) ("svn-status-remove-control-M" function (:user-visible-flag t) nil [73151 73458]) ("condition-case" code nil nil [73460 73679]) ("svn-status-mode-map" variable nil nil [73681 73756]) ("put" code nil nil [73757 73807]) ("svn-status-mode-mark-map" variable nil nil [73824 73919]) ("put" code nil nil [73920 73980]) ("svn-status-mode-property-map" variable nil nil [73997 74100]) ("put" code nil nil [74101 74161]) ("svn-status-mode-options-map" variable nil nil [74178 74278]) ("put" code nil nil [74279 74339]) ("svn-status-mode-trac-map" variable nil nil [74356 74465]) ("put" code nil nil [74466 74526]) ("svn-status-mode-extension-map" variable nil nil [74543 74655]) ("put" code nil nil [74656 74716]) ("svn-status-mode-branch-map" variable nil nil [74733 74835]) ("put" code nil nil [74836 74896]) ("when" code nil nil [74914 80963]) ("when" code nil nil [80964 82765]) ("when" code nil nil [82766 83178]) ("when" code nil nil [83179 84017]) ("when" code nil nil [84018 84702]) ("when" code nil nil [84703 84940]) ("easy-menu-define" code nil nil [84942 89437]) ("svn-status-popup-menu" function (:arguments ("event")) nil [89440 90156]) ("svn-status-face-set-temporary-during-popup" function (:arguments ("face" "begin" "end" "menu" "&optional" "prefix")) nil [90158 90556]) ("svn-status-mode" function (:user-visible-flag t) nil [90558 91381]) ("svn-status-update-mode-line" function nil nil [91383 91578]) ("svn-status-bury-buffer" function (:user-visible-flag t :arguments ("arg")) nil [91580 92436]) ("svn-status-save-some-buffers" function (:user-visible-flag t :arguments ("&optional" "tree")) nil [92438 93326]) ("svn-status-find-files" function (:user-visible-flag t) nil [93328 93590]) ("svn-status-find-file-other-window" function (:user-visible-flag t) nil [93593 93862]) ("svn-status-find-file-other-window-noselect" function (:user-visible-flag t) nil [93864 94176]) ("svn-status-view-file-other-window" function (:user-visible-flag t) nil [94178 94447]) ("svn-status-find-file-or-examine-directory" function (:user-visible-flag t) nil [94449 94886]) ("svn-status-examine-parent" function (:user-visible-flag t) nil [94888 95041]) ("svn-status-mouse-find-file-or-examine-directory" function (:user-visible-flag t :arguments ("event")) nil [95043 95334]) ("svn-status-line-info->ui-status" function (:arguments ("line-info")) nil [95336 95525]) ("svn-status-line-info->has-usermark" function (:arguments ("line-info")) nil [95527 95607]) ("svn-status-line-info->user-elide" function (:arguments ("line-info")) nil [95608 95686]) ("svn-status-line-info->filemark" function (:arguments ("line-info")) nil [95688 95756]) ("svn-status-line-info->propmark" function (:arguments ("line-info")) nil [95757 95825]) ("svn-status-line-info->filename" function (:arguments ("line-info")) nil [95826 95894]) ("svn-status-line-info->filename-nondirectory" function (:arguments ("line-info")) nil [95895 96028]) ("svn-status-line-info->localrev" function (:arguments ("line-info")) nil [96029 96143]) ("svn-status-line-info->lastchangerev" function (:arguments ("line-info")) nil [96144 96339]) ("svn-status-line-info->author" function (:arguments ("line-info")) nil [96340 96491]) ("svn-status-line-info->update-available" function (:arguments ("line-info")) nil [96492 96715]) ("svn-status-line-info->locked" function (:arguments ("line-info")) nil [96716 97022]) ("svn-status-line-info->historymark" function (:arguments ("line-info")) nil [97023 97247]) ("svn-status-line-info->switched" function (:arguments ("line-info")) nil [97248 97470]) ("svn-status-line-info->repo-locked" function (:arguments ("line-info")) nil [97471 97715]) ("svn-status-line-info->is-visiblep" function (:arguments ("line-info")) nil [97717 98055]) ("svn-status-line-info->hide-because-unknown" function (:arguments ("line-info")) nil [98057 98209]) ("svn-status-line-info->hide-because-custom-hide-function" function (:arguments ("line-info")) nil [98211 98390]) ("svn-status-line-info->hide-because-unmodified" function (:arguments ("line-info")) nil [98392 99037]) ("svn-status-line-info->hide-because-user-elide" function (:arguments ("line-info")) nil [99039 99158]) ("svn-status-line-info->show-user-elide-continuation" function (:arguments ("line-info")) nil [99160 99293]) ("svn-status-line-info->set-filemark" function (:arguments ("line-info" "value")) nil [99319 99417]) ("svn-status-line-info->set-propmark" function (:arguments ("line-info" "value")) nil [99419 99517]) ("svn-status-line-info->set-localrev" function (:arguments ("line-info" "value")) nil [99519 99617]) ("svn-status-line-info->set-author" function (:arguments ("line-info" "value")) nil [99619 99715]) ("svn-status-line-info->set-lastchangerev" function (:arguments ("line-info" "value")) nil [99717 99820]) ("svn-status-line-info->set-repo-locked" function (:arguments ("line-info" "value")) nil [99822 99924]) ("svn-status-copy-current-line-info" function (:user-visible-flag t :arguments ("arg")) nil [99926 100469]) ("svn-status-copy-filename-as-kill" function (:user-visible-flag t :arguments ("arg")) nil [100471 100897]) ("svn-status-get-child-directories" function (:user-visible-flag t :arguments ("&optional" "dir")) nil [100899 101580]) ("svn-status-toggle-elide" function (:user-visible-flag t :arguments ("arg")) nil [101582 103846]) ("svn-status-apply-elide-list" function (:user-visible-flag t) nil [103848 105055]) ("svn-status-update-with-command-list" function (:arguments ("cmd-list")) nil [105057 106836]) ("svn-status-annotate-status-buffer-entry" function (:arguments ("action" "line-info")) nil [106838 109214]) ("svn-status-parse-commit-output" function nil nil [109387 111418]) ("svn-status-parse-ar-output" function nil nil [111499 112502]) ("svn-status-parse-update-output" function nil nil [112606 114596]) ("svn-status-parse-property-output" function nil nil [114708 115323]) ("svn-status-line-info->symlink-p" function (:arguments ("line-info")) nil [115441 115860]) ("svn-status-line-info->directory-p" function (:arguments ("line-info")) nil [115862 116120]) ("svn-status-line-info->full-path" function (:arguments ("line-info")) nil [116122 116303]) ("svn-status-count-/" function (:arguments ("string")) nil [116358 116554]) ("svn-insert-line-in-status-buffer" function (:arguments ("line-info")) nil [116556 121919]) ("svn-status-update-buffer" function (:user-visible-flag t) nil [121921 126777]) ("svn-status-parse-info" function (:user-visible-flag t :arguments ("arg")) nil [126779 127520]) ("svn-status-parse-info-result" function nil nil [127522 128404]) ("svn-status-base-info->url" function nil nil [128406 128578]) ("svn-status-base-info->repository-root" function nil nil [128580 128788]) ("svn-status-ls" function (:user-visible-flag t :arguments ("path" "&optional" "synchron")) nil [128790 129098]) ("svn-status-ls-branches" function (:user-visible-flag t) nil [129100 129388]) ("svn-status-ls-tags" function (:user-visible-flag t) nil [129390 129666]) ("svn-status-toggle-edit-cmd-flag" function (:user-visible-flag t :arguments ("&optional" "reset")) nil [129668 130679]) ("svn-status-goto-root-or-return" function (:user-visible-flag t) nil [130681 131146]) ("svn-status-next-line" function (:user-visible-flag t :arguments ("nr-of-lines")) nil [131148 131582]) ("svn-status-previous-line" function (:user-visible-flag t :arguments ("nr-of-lines")) nil [131584 132030]) ("svn-status-dired-jump" function (:user-visible-flag t) nil [132032 132570]) ("svn-status-possibly-negate-meaning-of-arg" function (:arguments ("arg" "&optional" "command")) nil [132572 132876]) ("svn-status-update" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [132878 133259]) ("svn-status-get-line-information" function nil nil [133261 133916]) ("svn-status-get-file-list" function (:arguments ("use-marked-files")) nil [133919 134227]) ("svn-status-get-file-list-names" function (:arguments ("use-marked-files")) nil [134229 134373]) ("svn-status-get-file-information" function nil nil [134375 134961]) ("svn-status-select-line" function (:user-visible-flag t) nil [134963 135367]) ("svn-status-ensure-cursor-on-file" function nil nil [135369 135553]) ("svn-status-directory-containing-point" function (:arguments ("allow-self")) nil [135555 136239]) ("svn-status-line-info->directory-containing-line-info" function (:arguments ("line-info" "allow-self")) nil [136241 136785]) ("svn-status-set-user-mark" function (:user-visible-flag t :arguments ("arg")) nil [136787 137478]) ("svn-status-unset-user-mark" function (:user-visible-flag t :arguments ("arg")) nil [137480 138185]) ("svn-status-unset-user-mark-backwards" function (:user-visible-flag t) nil [138187 138706]) ("svn-status-apply-usermark" function (:arguments ("set-mark" "only-this-line")) nil [138708 140603]) ("svn-status-apply-usermark-checked" function (:arguments ("check-function" "set-mark")) nil [140605 141511]) ("svn-status-mark-unknown" function (:user-visible-flag t :arguments ("arg")) nil [141513 141857]) ("svn-status-mark-added" function (:user-visible-flag t :arguments ("arg")) nil [141859 142199]) ("svn-status-mark-modified" function (:user-visible-flag t :arguments ("arg")) nil [142201 142689]) ("svn-status-mark-deleted" function (:user-visible-flag t :arguments ("arg")) nil [142691 143050]) ("svn-status-mark-changed" function (:user-visible-flag t :arguments ("arg")) nil [143052 143471]) ("svn-status-unset-all-usermarks" function nil nil [143473 143591]) ("svn-status-regexp-history" variable nil nil [143593 143700]) ("svn-status-read-regexp" function (:arguments ("prompt")) nil [143702 143812]) ("svn-status-mark-filename-regexp" function (:user-visible-flag t :arguments ("regexp" "&optional" "unmark")) nil [143814 144328]) ("svn-status-mark-by-file-ext" function (:user-visible-flag t :arguments ("ext" "&optional" "unmark")) nil [144330 144923]) ("svn-status-toggle-hide-unknown" function nil nil [144925 145074]) ("svn-status-toggle-hide-unmodified" function nil nil [145076 145234]) ("svn-status-get-file-name-buffer-position" function (:arguments ("name")) nil [145236 146456]) ("svn-status-goto-file-name" function (:arguments ("name")) nil [146458 146734]) ("svn-status-find-info-for-file-name" function (:arguments ("name")) nil [146736 147055]) ("svn-status-marked-files" function nil nil [147057 147576]) ("svn-status-marked-file-names" function nil nil [147578 147686]) ("svn-status-some-files-marked-p" function nil nil [147688 148145]) ("svn-status-ui-information-hash-table" function nil nil [148147 148561]) ("svn-status-create-arg-file" function (:arguments ("file-name" "prefix" "file-info-list" "postfix")) nil [148564 148893]) ("svn-status-show-process-buffer-internal" function (:arguments ("&optional" "scroll-to-top")) nil [148895 149302]) ("svn-status-show-process-output" function (:arguments ("cmd" "&optional" "scroll-to-top")) nil [149304 150817]) ("svn-status-show-svn-log" function (:user-visible-flag t :arguments ("arg")) nil [150819 151815]) ("svn-file-show-svn-log" function (:user-visible-flag t) nil [151817 152166]) ("svn-status-version" function (:user-visible-flag t) nil [152168 153396]) ("svn-status-info" function (:user-visible-flag t) nil [153398 153695]) ("svn-status-info-for-path" function (:arguments ("path")) nil [153697 154373]) ("svn-status-blame" function (:user-visible-flag t :arguments ("revision")) nil [154375 154942]) ("svn-status-show-svn-diff" function (:user-visible-flag t :arguments ("arg")) nil [154944 155451]) ("svn-file-show-svn-diff" function (:user-visible-flag t :arguments ("arg")) nil [155453 155874]) ("svn-status-show-svn-diff-for-marked-files" function (:user-visible-flag t :arguments ("arg")) nil [155876 156520]) ("svn-status-show-svn-diff-internal" function (:arguments ("line-infos" "recursive" "revision")) nil [156522 158899]) ("svn-status-diff-save-current-defun-as-kill" function (:user-visible-flag t) nil [158901 159281]) ("svn-status-diff-pop-to-commit-buffer" function (:user-visible-flag t) nil [159283 159711]) ("svn-status-activate-diff-mode" function nil nil [159713 160097]) ("define-derived-mode" code nil nil [160099 160470]) ("svn-status-diff-update" function (:user-visible-flag t :arguments ("arg" "noconfirm")) nil [160472 160739]) ("svn-status-show-process-buffer" function (:user-visible-flag t) nil [160741 160898]) ("svn-status-pop-to-partner-buffer" function (:user-visible-flag t) nil [160900 161196]) ("svn-status-pop-to-new-partner-buffer" function (:arguments ("buffer")) nil [161198 161447]) ("svn-status-add-file-recursively" function (:user-visible-flag t :arguments ("arg")) nil [161449 161977]) ("svn-status-add-file" function (:user-visible-flag t :arguments ("arg")) nil [161979 162577]) ("svn-status-lock" function (:user-visible-flag t :arguments ("arg")) nil [162579 162947]) ("svn-status-unlock" function (:user-visible-flag t :arguments ("arg")) nil [162949 163327]) ("svn-status-make-directory" function (:user-visible-flag t :arguments ("dir")) nil [163329 163762]) ("svn-status-mv" function (:user-visible-flag t) nil [163764 164533]) ("svn-status-cp" function (:user-visible-flag t) nil [164535 164644]) ("svn-status-mv-cp" function (:arguments ("command" "singleprompt" "manyprompt" "fallback")) nil [164646 169695]) ("svn-status-run-mv-cp" function (:arguments ("command" "original" "destination" "&optional" "force")) nil [169697 170853]) ("svn-status-revert" function (:user-visible-flag t) nil [170855 171534]) ("svn-status-rm" function (:user-visible-flag t :arguments ("force")) nil [171536 172931]) ("svn-status-update-cmd" function (:user-visible-flag t :arguments ("arg")) nil [172933 173368]) ("svn-status-commit" function (:user-visible-flag t) nil [173370 174109]) ("svn-status-pop-to-commit-buffer" function (:user-visible-flag t) nil [174111 174877]) ("svn-status-switch-to-status-buffer" function (:user-visible-flag t) nil [174879 175035]) ("svn-status-pop-to-status-buffer" function (:user-visible-flag t) nil [175037 175184]) ("svn-status-via-bookmark" function (:user-visible-flag t :arguments ("bookmark")) nil [175186 175733]) ("svn-status-export" function (:user-visible-flag t) nil [175735 176287]) ("svn-status-cleanup" function (:user-visible-flag t :arguments ("arg")) nil [176289 176824]) ("svn-status-resolved" function (:user-visible-flag t) nil [176826 177515]) ("svn-status-svnversion" function (:user-visible-flag t) nil [177518 178189]) ("svn-status-file-modified-after-save-flag" variable (:default-value 109) nil [178428 178634]) ("svn-status-after-save-hook" function nil nil [178635 180624]) ("add-hook" code nil nil [180626 180681]) ("svn-status-get-specific-revision" function (:user-visible-flag t :arguments ("arg")) nil [180879 181264]) ("svn-status-get-specific-revision-internal" function (:arguments ("line-infos" "revision")) nil [181266 185316]) ("svn-status-ediff-with-revision" function (:user-visible-flag t :arguments ("arg")) nil [185319 186009]) ("svn-ediff-startup-hook" function nil nil [186011 186232]) ("svn-ediff-exit-hook" function (:arguments ("svn-buf" "tmp-bufs")) nil [186234 186708]) ("svn-status-read-revision-string" function (:user-visible-flag t :arguments ("prompt" "&optional" "default-value")) nil [186711 186883]) ("svn-file-show-svn-ediff" function (:user-visible-flag t :arguments ("arg")) nil [186885 187197]) ("svn-process-kill" function (:user-visible-flag t) nil [187392 187608]) ("svn-process-send-string" function (:user-visible-flag t :arguments ("string" "&optional" "send-passwd")) nil [187610 188183]) ("svn-process-send-string-and-newline" function (:user-visible-flag t :arguments ("string" "&optional" "send-passwd")) nil [188185 188804]) ("svn-status-property-list" function nil nil [188998 189288]) ("svn-status-proplist-start" function nil nil [189290 189520]) ("svn-status-property-edit-one-entry" function (:user-visible-flag t :arguments ("arg")) nil [189521 189776]) ("svn-status-property-set" function nil nil [189778 189912]) ("svn-status-property-delete" function nil nil [189914 190049]) ("svn-status-property-parse-property-names" function nil nil [190051 192633]) ("svn-status-property-edit" function (:arguments ("file-info-list" "prop-name" "&optional" "new-prop-value" "remove-values")) nil [192635 194531]) ("svn-status-property-set-property" function (:arguments ("file-info-list" "prop-name" "prop-value")) nil [194533 195107]) ("svn-status-get-directory" function (:arguments ("line-info")) nil [195110 195395]) ("svn-status-get-file-list-per-directory" function (:arguments ("files")) nil [195397 195965]) ("svn-status-property-ignore-file" function nil nil [195967 196755]) ("svn-status-property-ignore-file-extension" function nil nil [196757 197725]) ("svn-status-property-edit-svn-ignore" function nil nil [197727 198165]) ("svn-status-property-set-keyword-list" function (:user-visible-flag t) nil [198168 198428]) ("svn-status-property-set-keyword-id" function (:user-visible-flag t :arguments ("arg")) nil [198430 198795]) ("svn-status-property-set-keyword-date" function (:user-visible-flag t :arguments ("arg")) nil [198797 199172]) ("svn-status-property-set-eol-style" function (:user-visible-flag t) nil [199175 199528]) ("svn-status-property-set-executable" function (:user-visible-flag t) nil [199530 199732]) ("svn-status-property-set-mime-type" function (:user-visible-flag t) nil [199734 200306]) ("svn-prop-edit-mode-map" variable nil nil [200500 200581]) ("put" code nil nil [200582 200635]) ("when" code nil nil [200653 201185]) ("easy-menu-define" code nil nil [201187 201599]) ("svn-prop-edit-mode" function (:user-visible-flag t) nil [201601 201937]) ("svn-prop-edit-abort" function nil nil [201939 202075]) ("svn-prop-edit-done" function nil nil [202077 202148]) ("svn-prop-edit-do-it" function (:arguments ("async")) nil [202150 203510]) ("svn-prop-edit-svn-diff" function (:arguments ("arg")) nil [203512 203809]) ("svn-prop-edit-svn-log" function (:arguments ("arg")) nil [203811 203936]) ("svn-prop-edit-svn-status" function nil nil [203938 204049]) ("svn-log-edit-mode-map" variable nil nil [204242 204321]) ("put" code nil nil [204322 204374]) ("svn-log-edit-mode-menu" variable nil nil [204392 204423]) ("svn-log-edit-common-setup" function nil nil [204472 204666]) ("if" code nil nil [204668 205742]) ("when" code nil nil [205744 206501]) ("easy-menu-define" code nil nil [206503 207116]) ("put" code nil nil [207117 207170]) ("svn-log-edit-abort" function nil nil [207172 207305]) ("svn-log-edit-done" function (:user-visible-flag t) nil [207307 209279]) ("svn-log-edit-svn-diff" function (:user-visible-flag t :arguments ("arg")) nil [209281 209852]) ("svn-log-edit-svn-log" function (:arguments ("arg")) nil [209854 209978]) ("svn-log-edit-svn-status" function nil nil [209980 210090]) ("svn-log-edit-files-to-commit" function nil nil [210092 210201]) ("svn-log-edit-show-files-to-commit" function nil nil [210203 210403]) ("svn-log-edit-save-message" function (:user-visible-flag t) nil [210405 210725]) ("svn-log-edit-erase-edit-buffer" function (:user-visible-flag t) nil [210727 210905]) ("svn-log-edit-insert-files-to-commit" function nil nil [210907 211568]) ("svn-log-edit-remove-comment-lines" function nil nil [211570 211704]) ("svn-file-add-to-changelog" function (:user-visible-flag t :arguments ("prefix-arg")) nil [211706 212314]) ("svn-file-add-to-log-changelog-style" function (:user-visible-flag t :arguments ("curdir")) nil [212316 212717]) ("svn-dev-log-path-derive" function (:arguments ("path")) nil [212765 213439]) ("svn-file-add-to-log-svn-dev-style" function (:user-visible-flag t :arguments ("prefix-arg")) nil [213483 217241]) ("svn-log-view-mode-map" variable nil nil [217434 217513]) ("put" code nil nil [217514 217566]) ("when" code nil nil [217584 218041]) ("svn-log-view-popup-menu-map" variable nil nil [218043 218149]) ("put" code nil nil [218150 218208]) ("when" code nil nil [218225 218454]) ("easy-menu-define" code nil nil [218456 218706]) ("svn-log-view-popup-menu" function (:arguments ("event")) nil [218708 219009]) ("svn-log-view-font-lock-keywords" variable (:default-value (quote (("^r[0-9]+ .+" (0 (\` (face font-lock-keyword-face mouse-face highlight keymap (\, svn-log-view-popup-menu-map)))))))) nil [219011 219295]) ("put" code nil nil [219296 219358]) ("define-derived-mode" code nil nil [219376 219700]) ("svn-log-view-next" function nil nil [219702 219818]) ("svn-log-view-prev" function nil nil [219820 219939]) ("svn-log-revision-at-point" function nil nil [219941 220095]) ("svn-log-view-diff" function (:user-visible-flag t :arguments ("arg")) nil [220097 220613]) ("svn-log-edit-log-entry" function (:user-visible-flag t) nil [220615 221382]) ("svn-info-mode-map" variable nil nil [221569 221640]) ("put" code nil nil [221641 221689]) ("when" code nil nil [221707 222164]) ("svn-info-mode" function (:user-visible-flag t) nil [222166 222411]) ("svn-info-show-context" function (:user-visible-flag t) nil [222413 223338]) ("svn-process-mode-map" variable nil nil [223528 223605]) ("put" code nil nil [223606 223657]) ("when" code nil nil [223675 223964]) ("easy-menu-define" code nil nil [223966 224305]) ("svn-process-mode" function (:user-visible-flag t) nil [224307 224750]) ("svn-status-repo-for-path" function (:arguments ("directory")) nil [224954 225387]) ("svn-status-base-dir" function (:arguments ("&optional" "start-directory")) nil [225389 227264]) ("svn-status-base-dir-for-ancient-svn-client" function (:arguments ("&optional" "start-directory")) nil [227266 228185]) ("svn-status-save-state" function (:user-visible-flag t) nil [228187 229015]) ("svn-status-load-state" function (:user-visible-flag t :arguments ("&optional" "no-error")) nil [229017 230467]) ("svn-status-toggle-sort-status-buffer" function (:user-visible-flag t) nil [230469 231000]) ("svn-status-toggle-display-full-path" function (:user-visible-flag t) nil [231002 231375]) ("svn-status-set-trac-project-root" function nil nil [231377 231707]) ("svn-status-set-module-name" function (:user-visible-flag t) nil [231709 232057]) ("svn-status-set-changelog-style" function (:user-visible-flag t) nil [232059 232563]) ("svn-status-set-branch-list" function (:user-visible-flag t) nil [232565 232946]) ("svn-browse-url" function (:arguments ("url")) nil [232948 233191]) ("svn-trac-browse-wiki" function (:user-visible-flag t) nil [233392 233628]) ("svn-trac-browse-timeline" function (:user-visible-flag t) nil [233630 233878]) ("svn-trac-browse-roadmap" function (:user-visible-flag t) nil [233880 234125]) ("svn-trac-browse-source" function (:user-visible-flag t) nil [234127 234372]) ("svn-trac-browse-report" function (:user-visible-flag t :arguments ("arg")) nil [234374 234733]) ("svn-trac-browse-changeset" function (:user-visible-flag t :arguments ("changeset-nr")) nil [234735 235081]) ("svn-trac-browse-ticket" function (:user-visible-flag t :arguments ("ticket-nr")) nil [235083 235411]) ("svn-resolve-conflicts-ediff" function (:user-visible-flag t :arguments ("&optional" "name-A" "name-B")) nil [235575 238928]) ("svn-resolve-conflicts" function (:arguments ("filename")) nil [238930 239162]) ("svn-status-resolve-conflicts" function (:user-visible-flag t) nil [239164 239558]) ("svn-branch-select" function (:user-visible-flag t :arguments ("&optional" "prompt")) nil [239755 240697]) ("svn-branch-diff" function (:user-visible-flag t :arguments ("branch1" "branch2")) nil [240699 241163]) ("svn-admin-create" function (:user-visible-flag t :arguments ("dir")) nil [241355 241831]) ("svn-admin-create-trunk-directory" function (:user-visible-flag t) nil [241980 242568]) ("svn-admin-start-import" function (:user-visible-flag t) nil [242570 243322]) ("svn-status-elp-init" function nil nil [243670 243876]) ("svn-status-last-commands" function (:user-visible-flag t :arguments ("&optional" "string-prefix")) nil [243878 244251]) ("svn-insert-indented-lines" function (:arguments ("text")) nil [244439 244622]) ("svn-prepare-bug-report" function (:user-visible-flag t) nil [244624 245701]) ("svn-prepare-for-reload-dont-touch-list" variable (:default-value (quote nil)) nil [246348 246476]) ("svn-prepare-for-reload-variables-list" variable (:default-value (quote (svn-global-keymap svn-status-diff-mode-map svn-global-trac-map svn-status-mode-map svn-status-mode-property-map svn-status-mode-extension-map svn-status-mode-options-map svn-status-mode-trac-map svn-status-mode-branch-map svn-log-edit-mode-map svn-log-view-mode-map svn-log-view-popup-menu-map svn-info-mode-map svn-process-mode-map))) nil [246477 247134]) ("svn-prepare-for-reload" function (:user-visible-flag t) nil [247135 247763]) ("psvn" package nil nil [247765 247780]))
    :file "psvn.el"
    :pointmax 247857
    )
   (semanticdb-table "erlang.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("erlang-version" variable (:constant-flag t :default-value "2.4.1") nil [2010 2082]) ("erlang-root-dir" variable nil nil [2084 2298]) ("erlang-menu-items" variable (:user-visible-flag t :default-value (quote (erlang-menu-base-items erlang-menu-skel-items erlang-menu-shell-items erlang-menu-compile-items erlang-menu-man-items erlang-menu-personal-items erlang-menu-version-items))) nil [2300 2835]) ("erlang-menu-base-items" variable (:user-visible-flag t :default-value (quote (("Indent" (("Indent Line" erlang-indent-command) ("Indent Region " erlang-indent-region (if erlang-xemacs-p (mark) mark-active)) ("Indent Clause" erlang-indent-clause) ("Indent Function" erlang-indent-function) ("Indent Buffer" erlang-indent-current-buffer))) ("Edit" (("Fill Comment" erlang-fill-paragraph) ("Comment Region" comment-region (if erlang-xemacs-p (mark) mark-active)) ("Uncomment Region" erlang-uncomment-region (if erlang-xemacs-p (mark) mark-active)) nil ("Beginning of Function" erlang-beginning-of-function) ("End of Function" erlang-end-of-function) ("Mark Function" erlang-mark-function) nil ("Beginning of Clause" erlang-beginning-of-clause) ("End of Clause" erlang-end-of-clause) ("Mark Clause" erlang-mark-clause) nil ("New Clause" erlang-generate-new-clause) ("Clone Arguments" erlang-clone-arguments))) ("Syntax Highlighting" (("Level 3" erlang-font-lock-level-3) ("Level 2" erlang-font-lock-level-2) ("Level 1" erlang-font-lock-level-1) ("Off" erlang-font-lock-level-0))) ("TAGS" (("Find Tag" find-tag) ("Find Next Tag" erlang-find-next-tag) ("Complete Word" erlang-complete-tag) ("Tags Apropos" tags-apropos) ("Search Files" tags-search)))))) nil [2837 5007]) ("erlang-menu-shell-items" variable (:user-visible-flag t :default-value (quote (nil ("Shell" (("Start New Shell" erlang-shell) ("Display Shell" erlang-shell-display)))))) nil [5009 5266]) ("erlang-menu-compile-items" variable (:user-visible-flag t :default-value (quote (("Compile" (("Compile Buffer" erlang-compile) ("Display Result" erlang-compile-display) ("Next Error" erlang-next-error)))))) nil [5268 5568]) ("erlang-menu-version-items" variable (:user-visible-flag t :default-value (quote (nil ("Version" erlang-version)))) nil [5570 5702]) ("erlang-menu-personal-items" variable (:user-visible-flag t) nil [5704 5887]) ("erlang-menu-man-items" variable nil nil [5889 6116]) ("erlang-menu-skel-items" variable (:default-value (quote nil)) nil [6118 6290]) ("erlang-mode-hook" variable (:user-visible-flag t) nil [6292 7703]) ("erlang-load-hook" variable (:user-visible-flag t) nil [7705 8835]) ("erlang-new-file-hook" variable nil nil [8837 9067]) ("erlang-check-module-name" variable (:user-visible-flag t :default-value (quote ask)) nil [9069 9306]) ("erlang-electric-commands" variable (:user-visible-flag t :default-value (quote (erlang-electric-comma erlang-electric-semicolon erlang-electric-gt))) nil [9308 9826]) ("erlang-electric-newline-inhibit" variable (:user-visible-flag t :default-value t) nil [9828 10265]) ("erlang-electric-newline-inhibit-list" variable (:user-visible-flag t :default-value (quote (erlang-electric-semicolon erlang-electric-comma erlang-electric-gt))) nil [10267 10441]) ("erlang-electric-semicolon-insert-blank-lines" variable (:user-visible-flag t) nil [10443 10841]) ("erlang-electric-semicolon-criteria" variable (:user-visible-flag t :default-value (quote (erlang-next-lines-empty-p erlang-at-keyword-end-p erlang-at-end-of-function-p))) nil [10843 11571]) ("erlang-electric-comma-criteria" variable (:user-visible-flag t :default-value (quote (erlang-stop-when-inside-argument-list erlang-stop-when-at-guard erlang-next-lines-empty-p erlang-at-keyword-end-p erlang-at-end-of-function-p))) nil [11573 12361]) ("erlang-electric-arrow-criteria" variable (:user-visible-flag t :default-value (quote (erlang-next-lines-empty-p erlang-at-end-of-function-p))) nil [12363 13066]) ("erlang-electric-newline-criteria" variable (:user-visible-flag t :default-value (quote (t))) nil [13068 13959]) ("erlang-next-lines-empty-threshold" variable (:user-visible-flag t :default-value 2) nil [13961 14950]) ("erlang-new-clause-with-arguments" variable (:user-visible-flag t) nil [14952 15206]) ("erlang-compile-use-outdir" variable (:user-visible-flag t :default-value t) nil [15208 15614]) ("erlang-indent-level" variable (:user-visible-flag t :default-value 4) nil [15616 15702]) ("erlang-indent-guard" variable (:user-visible-flag t :default-value 2) nil [15704 15769]) ("erlang-argument-indent" variable (:user-visible-flag t :default-value 2) nil [15771 15925]) ("erlang-tab-always-indent" variable (:user-visible-flag t :default-value t) nil [15927 16112]) ("erlang-error-regexp-alist" variable (:user-visible-flag t :default-value (quote (("^\\([^:( 	
]+\\)[:(][ 	]*\\([0-9]+\\)[:) 	]" 1 2)))) nil [16114 16255]) ("erlang-man-inhibit" variable (:default-value (eq system-type (quote windows-nt))) nil [16257 16478]) ("erlang-man-dirs" variable (:user-visible-flag t :default-value (quote (("Man - Commands" "/man/man1" t) ("Man - Modules" "/man/man3" t) ("Man - Unsupported" "/uc/man/man3" t)))) nil [16480 16950]) ("erlang-man-max-menu-size" variable (:user-visible-flag t :default-value 20) nil [16952 17047]) ("erlang-man-display-function" variable (:user-visible-flag t :default-value (quote erlang-man-display)) nil [17049 17330]) ("erlang-atom-regexp" variable (:constant-flag t :default-value "\\([a-z][a-zA-Z0-9_]*\\|'[^
']*[^\\]'\\)") nil [17332 17517]) ("erlang-atom-regexp-matches" variable (:constant-flag t :default-value 1) nil [17518 17724]) ("erlang-variable-regexp" variable (:constant-flag t :default-value "\\([A-Z_][a-zA-Z0-9_]*\\)") nil [17726 17903]) ("erlang-variable-regexp-matches" variable (:constant-flag t :default-value 1) nil [17904 18109]) ("erlang-defun-prompt-regexp" variable (:user-visible-flag t :default-value (concat "^" erlang-atom-regexp "\\s *(")) nil [18111 18241]) ("erlang-file-name-extension-regexp" variable (:user-visible-flag t :default-value "\\.[eh]rl$") nil [18243 18807]) ("erlang-mode-map" variable (:user-visible-flag t) nil [18809 18870]) ("erlang-mode-abbrev-table" variable nil nil [18871 18956]) ("erlang-mode-syntax-table" variable nil nil [18957 19042]) ("erlang-emacs-major-version" variable (:constant-flag t :default-value (if (boundp (quote emacs-major-version)) emacs-major-version (string-match "\\([0-9]+\\)\\.\\([0-9]+\\)" emacs-version) (string-to-int (substring emacs-version (match-beginning 1) (match-end 1))))) nil [19044 19331]) ("erlang-emacs-minor-version" variable (:constant-flag t :default-value (if (boundp (quote emacs-minor-version)) emacs-minor-version (string-match "\\([0-9]+\\)\\.\\([0-9]+\\)" emacs-version) (string-to-int (substring emacs-version (match-beginning 2) (match-end 2))))) nil [19333 19620]) ("erlang-xemacs-p" variable (:constant-flag t :default-value (string-match "Lucid\\|XEmacs" emacs-version)) nil [19622 19748]) ("erlang-xemacs-popup-menu" variable (:default-value (quote ("Erlang Mode Commands"))) nil [19750 20083]) ("erlang-skel" variable (:user-visible-flag t :default-value (quote (("If" "if" erlang-skel-if) ("Case" "case" erlang-skel-case) ("Receive" "receive" erlang-skel-receive) ("Receive After" "after" erlang-skel-receive-after) ("Receive Loop" "loop" erlang-skel-receive-loop) ("Module" "module" erlang-skel-module) ("Author" "author" erlang-skel-author) nil ("Small Header" "small-header" erlang-skel-small-header erlang-skel-header) ("Normal Header" "normal-header" erlang-skel-normal-header erlang-skel-header) ("Large Header" "large-header" erlang-skel-large-header erlang-skel-header) nil ("Small Server" "small-server" erlang-skel-small-server erlang-skel-header) nil ("Application" "application" erlang-skel-application erlang-skel-header) ("Supervisor" "supervisor" erlang-skel-supervisor erlang-skel-header) ("supervisor_bridge" "supervisor-bridge" erlang-skel-supervisor-bridge erlang-skel-header) ("gen_server" "generic-server" erlang-skel-generic-server erlang-skel-header) ("gen_event" "gen-event" erlang-skel-gen-event erlang-skel-header) ("gen_fsm" "gen-fsm" erlang-skel-gen-fsm erlang-skel-header) ("Library module" "gen-lib" erlang-skel-lib erlang-skel-header) ("Corba callback" "gen-corba-cb" erlang-skel-corba-callback erlang-skel-header)))) nil [20117 22451]) ("erlang-skel-mail-address" variable (:default-value (concat (user-login-name) "@" (or (and (boundp (quote mail-host-address)) (symbol-value (quote mail-host-address))) (system-name)))) nil [22583 22781]) ("erlang-skel-case" variable (:user-visible-flag t :default-value (quote ((erlang-skel-skip-blank) o > "case " p " of" n> p "_ ->" n> p "ok" n> "end" p))) nil [22808 23011]) ("erlang-skel-if" variable (:default-value (quote ((erlang-skel-skip-blank) o > "if" n> p " ->" n> p "ok" n> "end" p))) nil [23013 23201]) ("erlang-skel-receive" variable (:user-visible-flag t :default-value (quote ((erlang-skel-skip-blank) o > "receive" n> p "_ ->" n> p "ok" n> "end" p))) nil [23203 23406]) ("erlang-skel-receive-after" variable (:user-visible-flag t :default-value (quote ((erlang-skel-skip-blank) o > "receive" n> p "_ ->" n> p "ok" n> "after " p "T ->" n> p "ok" n> "end" p))) nil [23408 23675]) ("erlang-skel-receive-loop" variable (:user-visible-flag t :default-value (quote (& o "loop(" p ") ->" n> "receive" n> p "_ ->" n> "loop(" p ")" n> "end."))) nil [23677 23889]) ("erlang-skel-module" variable (:user-visible-flag t :default-value (quote (& "-module(" (erlang-add-quotes-if-needed (erlang-get-module-from-file-name)) ")." n))) nil [23916 24137]) ("erlang-skel-author" variable (:user-visible-flag t :default-value (quote (& "-author('" erlang-skel-mail-address "')." n))) nil [24139 24310]) ("erlang-skel-vc" variable (:user-visible-flag t) nil [24312 24572]) ("erlang-skel-export" variable (:user-visible-flag t :default-value (quote (& "-export([" n> "])." n))) nil [24574 24724]) ("erlang-skel-import" variable (:user-visible-flag t :default-value (quote (& "%%-import(Module, [Function/Arity, ...])." n))) nil [24726 24899]) ("erlang-skel-compile" variable (:user-visible-flag t) nil [24901 25065]) ("erlang-skel-date-function" variable (:user-visible-flag t :default-value (quote erlang-skel-dd-mmm-yyyy)) nil [25091 25251]) ("erlang-skel-copyright-comment" variable (:user-visible-flag t :default-value (quote nil)) nil [25253 25533]) ("erlang-skel-created-comment" variable (:user-visible-flag t :default-value (quote (& "%%% Created : " (funcall erlang-skel-date-function) " by " (user-full-name) " <" erlang-skel-mail-address ">" n))) nil [25535 25750]) ("erlang-skel-author-comment" variable (:user-visible-flag t :default-value (quote (& "%%% Author  : " (user-full-name) " <" erlang-skel-mail-address ">" n))) nil [25752 25980]) ("erlang-skel-file-comment" variable (:user-visible-flag t :default-value (quote (& "%%% File    : " (file-name-nondirectory buffer-file-name) n))) nil [25982 26199]) ("erlang-skel-small-header" variable (:user-visible-flag t :default-value (quote (o (erlang-skel-include erlang-skel-module) n (erlang-skel-include erlang-skel-compile erlang-skel-vc)))) nil [26201 26554]) ("erlang-skel-normal-header" variable (:user-visible-flag t :default-value (quote (o (erlang-skel-include erlang-skel-copyright-comment erlang-skel-file-comment erlang-skel-author-comment) "%%% Description : " p n (erlang-skel-include erlang-skel-created-comment) n (erlang-skel-include erlang-skel-small-header) n))) nil [26556 26944]) ("erlang-skel-large-header" variable (:user-visible-flag t :default-value (quote (o (erlang-skel-separator) (erlang-skel-include erlang-skel-copyright-comment erlang-skel-file-comment erlang-skel-author-comment) "%%% Description : " p n "%%%" n (erlang-skel-include erlang-skel-created-comment) (erlang-skel-separator) (erlang-skel-include erlang-skel-small-header)))) nil [26946 27405]) ("erlang-skel-small-server" variable (:user-visible-flag t :default-value (quote ((erlang-skel-include erlang-skel-large-header) "-export([start/0,init/1])." n n n "start() ->" n> "spawn(" (erlang-get-module-from-file-name) ", init, [self()])." n n "init(From) ->" n> "loop(From)." n n "loop(From) ->" n> "receive" n> p "_ ->" n> "loop(From)" n> "end."))) nil [27430 27866]) ("erlang-skel-application" variable (:user-visible-flag t :default-value (quote ((erlang-skel-include erlang-skel-large-header) "-behaviour(application)." n (erlang-skel-separator 2) "%% Include files" n (erlang-skel-separator 2) n (erlang-skel-separator 2) "%% External exports" n (erlang-skel-separator 2) "-export([" n> "start/2," n> "stop/1" n "        ])." n n (erlang-skel-separator 2) "%% Internal exports" n (erlang-skel-separator 2) "-export([" n "        ])." n n (erlang-skel-separator 2) "%% Macros" n (erlang-skel-separator 2) n (erlang-skel-separator 2) "%% Records" n (erlang-skel-separator 2) n (erlang-skel-double-separator 2) "%% External functions" n (erlang-skel-double-separator 2) (erlang-skel-separator 2) "%% Func: start/2" n "%% Returns: {ok, Pid}        |" n "%%          {ok, Pid, State} |" n "%%          {error, Reason}   " n (erlang-skel-separator 2) "start(Type, StartArgs) ->" n> "case 'TopSupervisor':start_link(StartArgs) of" n> "{ok, Pid} -> " n> "{ok, Pid};" n> "Error ->" n> "Error" n> "end." n n (erlang-skel-separator 2) "%% Func: stop/1" n "%% Returns: any " n (erlang-skel-separator 2) "stop(State) ->" n> "ok." n n (erlang-skel-double-separator 2) "%% Internal functions" n (erlang-skel-double-separator 2)))) nil [27893 29415]) ("erlang-skel-supervisor" variable (:user-visible-flag t :default-value (quote ((erlang-skel-include erlang-skel-large-header) "-behaviour(supervisor)." n (erlang-skel-separator 2) "%% Include files" n (erlang-skel-separator 2) n (erlang-skel-separator 2) "%% External exports" n (erlang-skel-separator 2) "-export([" n> "start_link/0" n "        ])." n n (erlang-skel-separator 2) "%% Internal exports" n (erlang-skel-separator 2) "-export([" n> "init/1" n "        ])." n n (erlang-skel-separator 2) "%% Macros" n (erlang-skel-separator 2) "-define(SERVER, ?MODULE)." n n (erlang-skel-separator 2) "%% Records" n (erlang-skel-separator 2) n (erlang-skel-double-separator 2) "%% External functions" n (erlang-skel-double-separator 2) (erlang-skel-separator 2) "%% Function: start_link/0" n "%% Description: Starts the supervisor" n (erlang-skel-separator 2) "start_link() ->" n> "supervisor:start_link({local, ?SERVER}, ?MODULE, [])." n n (erlang-skel-double-separator 2) "%% Server functions" n (erlang-skel-double-separator 2) (erlang-skel-separator 2) "%% Func: init/1" n "%% Returns: {ok,  {SupFlags,  [ChildSpec]}} |" n "%%          ignore                          |" n "%%          {error, Reason}   " n (erlang-skel-separator 2) "init([]) ->" n> "AChild = {'AName',{'AModule',start_link,[]}," n> "permanent,2000,worker,['AModule']}," n> "{ok,{{one_for_all,0,1}, [AChild]}}." n n (erlang-skel-double-separator 2) "%% Internal functions" n (erlang-skel-double-separator 2)))) nil [29417 31169]) ("erlang-skel-supervisor-bridge" variable (:user-visible-flag t :default-value (quote ((erlang-skel-include erlang-skel-large-header) "-behaviour(supervisor_bridge)." n (erlang-skel-separator 2) "%% Include files" n (erlang-skel-separator 2) n (erlang-skel-separator 2) "%% External exports" n (erlang-skel-separator 2) "-export([" n> "start_link/0" n "        ])." n n (erlang-skel-separator 2) "%% Internal exports" n (erlang-skel-separator 2) "-export([" n> "init/1, " n> "terminate/2" n "        ])." n n (erlang-skel-separator 2) "%% Macros" n (erlang-skel-separator 2) "-define(SERVER, ?MODULE)." n n (erlang-skel-separator 2) "%% Records" n (erlang-skel-separator 2) "-record(state, {})." n n (erlang-skel-double-separator 2) "%% External functions" n (erlang-skel-double-separator 2) (erlang-skel-separator 2) "%% Function: start_link/0" n "%% Description: Starts the supervisor bridge" n (erlang-skel-separator 2) "start_link() ->" n> "supervisor_bridge:start_link({local, ?SERVER}, ?MODULE, [])." n n (erlang-skel-double-separator 2) "%% Server functions" n (erlang-skel-double-separator 2) (erlang-skel-separator 2) "%% Func: init/1" n "%% Returns: {ok,  Pid, State} |" n "%%          ignore            |" n "%%          {error, Reason}    " n (erlang-skel-separator 2) "init([]) ->" n> "case 'AModule':start_link() of" n> "{ok, Pid} ->" n> "{ok, Pid, #state{}};" n> "Error ->" n> "Error" n> "end." n n (erlang-skel-separator 2) "%% Func: terminate/2" n "%% Purpose: Synchronized shutdown of the underlying sub system." n "%% Returns: any" n (erlang-skel-separator 2) "terminate(Reason, State) ->" n> "'AModule':stop()," n> "ok." n n (erlang-skel-double-separator 2) "%% Internal functions" n (erlang-skel-double-separator 2)))) nil [31171 33241]) ("erlang-skel-generic-server" variable (:user-visible-flag t :default-value (quote ((erlang-skel-include erlang-skel-large-header) "-behaviour(gen_server)." n (erlang-skel-separator 2) "%% Include files" n (erlang-skel-separator 2) n (erlang-skel-separator 2) "%% External exports" n "-export([start_link/0])." n n "%% gen_server callbacks" n "-export([init/1, handle_call/3, handle_cast/2, " "handle_info/2, terminate/2, code_change/3])." n n "-record(state, {})." n n (erlang-skel-double-separator 2) "%% External functions" n (erlang-skel-double-separator 2) (erlang-skel-separator 2) "%% Function: start_link/0" n "%% Description: Starts the server" n (erlang-skel-separator 2) "start_link() ->" n> "gen_server:start_link({local, ?SERVER}, ?MODULE, [], [])." n n (erlang-skel-double-separator 2) "%% Server functions" n (erlang-skel-double-separator 2) n (erlang-skel-separator 2) "%% Function: init/1" n "%% Description: Initiates the server" n "%% Returns: {ok, State}          |" n "%%          {ok, State, Timeout} |" n "%%          ignore               |" n "%%          {stop, Reason}" n (erlang-skel-separator 2) "init([]) ->" n> "{ok, #state{}}." n n (erlang-skel-separator 2) "%% Function: handle_call/3" n "%% Description: Handling call messages" n "%% Returns: {reply, Reply, State}          |" n "%%          {reply, Reply, State, Timeout} |" n "%%          {noreply, State}               |" n "%%          {noreply, State, Timeout}      |" n "%%          {stop, Reason, Reply, State}   | (terminate/2 is called)" n "%%          {stop, Reason, State}            (terminate/2 is called)" n (erlang-skel-separator 2) "handle_call(Request, From, State) ->" n> "Reply = ok," n> "{reply, Reply, State}." n n (erlang-skel-separator 2) "%% Function: handle_cast/2" n "%% Description: Handling cast messages" n "%% Returns: {noreply, State}          |" n "%%          {noreply, State, Timeout} |" n "%%          {stop, Reason, State}            (terminate/2 is called)" n (erlang-skel-separator 2) "handle_cast(Msg, State) ->" n> "{noreply, State}." n n (erlang-skel-separator 2) "%% Function: handle_info/2" n "%% Description: Handling all non call/cast messages" n "%% Returns: {noreply, State}          |" n "%%          {noreply, State, Timeout} |" n "%%          {stop, Reason, State}            (terminate/2 is called)" n (erlang-skel-separator 2) "handle_info(Info, State) ->" n> "{noreply, State}." n n (erlang-skel-separator 2) "%% Function: terminate/2" n "%% Description: Shutdown the server" n "%% Returns: any (ignored by gen_server)" n (erlang-skel-separator 2) "terminate(Reason, State) ->" n> "ok." n n (erlang-skel-separator 2) "%% Func: code_change/3" n "%% Purpose: Convert process state when code is changed" n "%% Returns: {ok, NewState}" n (erlang-skel-separator 2) "code_change(OldVsn, State, Extra) ->" n> "{ok, State}." n n (erlang-skel-separator 2) "%%% Internal functions" n (erlang-skel-separator 2)))) nil [33243 36597]) ("erlang-skel-gen-event" variable (:user-visible-flag t :default-value (quote ((erlang-skel-include erlang-skel-large-header) "-behaviour(gen_event)." n (erlang-skel-separator 2) "%% Include files" n (erlang-skel-separator 2) n (erlang-skel-separator 2) "%% External exports" n "-export([start_link/0, add_handler/0])." n n "%% gen_event callbacks" n "-export([init/1, handle_event/2, handle_call/2, " "handle_info/2, terminate/2, code_change/3])." n n "-record(state, {})." n n (erlang-skel-double-separator 2) "%% External functions" n (erlang-skel-double-separator 2) (erlang-skel-separator 2) "%% Function: start_link/0" n "%% Description: Starts the server" n (erlang-skel-separator 2) "start_link() ->" n> "gen_event:start_link({local, ?SERVER}). " n n (erlang-skel-separator 2) "%% Function: add_handler/0" n "%% Description: Adds an event handler" n (erlang-skel-separator 2) "add_handler() ->" n> "gen_event:add_handler(?SERVER, ?MODULE, [])." n n (erlang-skel-double-separator 2) "%% Server functions" n (erlang-skel-double-separator 2) (erlang-skel-separator 2) "%% Func: init/1" n "%% Returns: {ok, State}          |" n "%%          Other" n (erlang-skel-separator 2) "init([]) ->" n> "{ok, #state{}}." n n (erlang-skel-separator 2) "%% Func: handle_event/2" n "%% Returns: {ok, State}                                |" n "%%          {swap_handler, Args1, State1, Mod2, Args2} |" n "%%          remove_handler                              " n (erlang-skel-separator 2) "handle_event(Event, State) ->" n> "{ok, State}." n n (erlang-skel-separator 2) "%% Func: handle_call/2" n "%% Returns: {ok, Reply, State}                                |" n "%%          {swap_handler, Reply, Args1, State1, Mod2, Args2} |" n "%%          {remove_handler, Reply}                            " n (erlang-skel-separator 2) "handle_call(Request, State) ->" n> "Reply = ok," n> "{ok, Reply, State}." n n (erlang-skel-separator 2) "%% Func: handle_info/2" n "%% Returns: {ok, State}                                |" n "%%          {swap_handler, Args1, State1, Mod2, Args2} |" n "%%          remove_handler                              " n (erlang-skel-separator 2) "handle_info(Info, State) ->" n> "{ok, State}." n n (erlang-skel-separator 2) "%% Func: terminate/2" n "%% Purpose: Shutdown the server" n "%% Returns: any" n (erlang-skel-separator 2) "terminate(Reason, State) ->" n> "ok." n n (erlang-skel-separator 2) "%% Func: code_change/3" n "%% Purpose: Convert process state when code is changed" n "%% Returns: {ok, NewState}" n (erlang-skel-separator 2) "code_change(OldVsn, State, Extra) ->" n> "{ok, State}." n n (erlang-skel-separator 2) "%%% Internal functions" n (erlang-skel-separator 2)))) nil [36599 39700]) ("erlang-skel-gen-fsm" variable (:user-visible-flag t :default-value (quote ((erlang-skel-include erlang-skel-large-header) "-behaviour(gen_fsm)." n (erlang-skel-separator 2) "%% Include files" n (erlang-skel-separator 2) n (erlang-skel-separator 2) "%% External exports" n "-export([start_link/0])." n n "%% gen_fsm callbacks" n "-export([init/1, state_name/2, state_name/3, handle_event/3," n> "handle_sync_event/4, handle_info/3, terminate/3, code_change/4])." n n "-record(state, {})." n n (erlang-skel-double-separator 2) "%% External functions" n (erlang-skel-double-separator 2) (erlang-skel-separator 2) "%% Function: start_link/0" n "%% Description: Starts the server" n (erlang-skel-separator 2) "start_link() ->" n> "gen_fsm:start_link({local, ?SERVER}, ?MODULE, [], [])." n n (erlang-skel-double-separator 2) "%% Server functions" n (erlang-skel-double-separator 2) (erlang-skel-separator 2) "%% Func: init/1" n "%% Returns: {ok, StateName, StateData}          |" n "%%          {ok, StateName, StateData, Timeout} |" n "%%          ignore                              |" n "%%          {stop, StopReason}                   " n (erlang-skel-separator 2) "init([]) ->" n> "{ok, state_name, #state{}}." n n (erlang-skel-separator 2) "%% Func: StateName/2" n "%% Returns: {next_state, NextStateName, NextStateData}          |" n "%%          {next_state, NextStateName, NextStateData, Timeout} |" n "%%          {stop, Reason, NewStateData}                         " n (erlang-skel-separator 2) "state_name(Event, StateData) ->" n> "{next_state, state_name, StateData}." n n (erlang-skel-separator 2) "%% Func: StateName/3" n "%% Returns: {next_state, NextStateName, NextStateData}            |" n "%%          {next_state, NextStateName, NextStateData, Timeout}   |" n "%%          {reply, Reply, NextStateName, NextStateData}          |" n "%%          {reply, Reply, NextStateName, NextStateData, Timeout} |" n "%%          {stop, Reason, NewStateData}                          |" n "%%          {stop, Reason, Reply, NewStateData}                    " n (erlang-skel-separator 2) "state_name(Event, From, StateData) ->" n> "Reply = ok," n> "{reply, Reply, state_name, StateData}." n n (erlang-skel-separator 2) "%% Func: handle_event/3" n "%% Returns: {next_state, NextStateName, NextStateData}          |" n "%%          {next_state, NextStateName, NextStateData, Timeout} |" n "%%          {stop, Reason, NewStateData}                         " n (erlang-skel-separator 2) "handle_event(Event, StateName, StateData) ->" n> "{next_state, StateName, StateData}." n n (erlang-skel-separator 2) "%% Func: handle_sync_event/4" n "%% Returns: {next_state, NextStateName, NextStateData}            |" n "%%          {next_state, NextStateName, NextStateData, Timeout}   |" n "%%          {reply, Reply, NextStateName, NextStateData}          |" n "%%          {reply, Reply, NextStateName, NextStateData, Timeout} |" n "%%          {stop, Reason, NewStateData}                          |" n "%%          {stop, Reason, Reply, NewStateData}                    " n (erlang-skel-separator 2) "handle_sync_event(Event, From, StateName, StateData) ->" n> "Reply = ok," n> "{reply, Reply, StateName, StateData}." n n (erlang-skel-separator 2) "%% Func: handle_info/3" n "%% Returns: {next_state, NextStateName, NextStateData}          |" n "%%          {next_state, NextStateName, NextStateData, Timeout} |" n "%%          {stop, Reason, NewStateData}                         " n (erlang-skel-separator 2) "handle_info(Info, StateName, StateData) ->" n> "{next_state, StateName, StateData}." n n (erlang-skel-separator 2) "%% Func: terminate/3" n "%% Purpose: Shutdown the fsm" n "%% Returns: any" n (erlang-skel-separator 2) "terminate(Reason, StateName, StatData) ->" n> "ok." n n (erlang-skel-separator 2) "%% Func: code_change/4" n "%% Purpose: Convert process state when code is changed" n "%% Returns: {ok, NewState, NewStateData}" n (erlang-skel-separator 2) "code_change(OldVsn, StateName, StateData, Extra) ->" n> "{ok, StateName, StateData}." n n (erlang-skel-separator 2) "%%% Internal functions" n (erlang-skel-separator 2)))) nil [39702 44321]) ("erlang-skel-lib" variable (:user-visible-flag t :default-value (quote ((erlang-skel-include erlang-skel-large-header) (erlang-skel-separator 2) "%% Include files" n (erlang-skel-separator 2) n (erlang-skel-separator 2) "%% External exports" n (erlang-skel-separator 2) "-export([" n "        ])." n n (erlang-skel-separator 2) "%% Internal exports" n (erlang-skel-separator 2) "-export([" n "        ])." n n (erlang-skel-separator 2) "%% Macros" n (erlang-skel-separator 2) n (erlang-skel-separator 2) "%% Records" n (erlang-skel-separator 2) n (erlang-skel-double-separator 2) "%% External functions" n (erlang-skel-double-separator 2) (erlang-skel-separator 2) "%% Function: " n "%% Description:" n (erlang-skel-separator 2) n (erlang-skel-double-separator 2) "%% Internal functions" n (erlang-skel-double-separator 2)))) nil [44323 45342]) ("erlang-skel-corba-callback" variable (:user-visible-flag t :default-value (quote ((erlang-skel-include erlang-skel-large-header) (erlang-skel-separator 2) "%% Include files" n (erlang-skel-separator 2) n (erlang-skel-separator 2) "%% External exports" n (erlang-skel-separator 2) "-export([" n> "init/1, " n> "terminate/2," n> "code_change/3" n "        ])." n n (erlang-skel-separator 2) "%% Internal exports" n (erlang-skel-separator 2) "-export([" n "        ])." n n (erlang-skel-separator 2) "%% Macros" n (erlang-skel-separator 2) n (erlang-skel-separator 2) "%% Records" n (erlang-skel-separator 2) "-record(state, {})." n n (erlang-skel-double-separator 2) "%% External functions" n (erlang-skel-double-separator 2) (erlang-skel-separator 2) "%% Function: init/1" n "%% Description: Initiates the server" n "%% Returns: {ok, State}          |" n "%%          {ok, State, Timeout} |" n "%%          ignore               |" n "%%          {stop, Reason}" n (erlang-skel-separator 2) "init([]) ->" n> "{ok, #state{}}." n n (erlang-skel-separator 2) "%% Function: terminate/2" n "%% Description: Shutdown the server" n "%% Returns: any (ignored by gen_server)" n (erlang-skel-separator 2) "terminate(Reason, State) ->" n> "ok." n n (erlang-skel-separator 2) "%% Function: code_change/3" n "%% Description: Convert process state when code is changed" n "%% Returns: {ok, NewState}" n (erlang-skel-separator 2) "code_change(OldVsn, State, Extra) ->" n> "{ok, State}." n n (erlang-skel-double-separator 2) "%% Internal functions" n (erlang-skel-double-separator 2)))) nil [45344 47198]) ("erlang-font-lock-modern-p" variable (:default-value (cond ((>= erlang-emacs-major-version 20) t) (erlang-xemacs-p (>= erlang-emacs-minor-version 14)) ((= erlang-emacs-major-version 19) (>= erlang-emacs-minor-version 29)) (t nil))) nil [47227 47621]) ("erlang-font-lock-keywords-func" variable (:default-value (list (list (concat "^" erlang-atom-regexp "\\s *(") 1 (quote font-lock-function-name-face) t))) nil [47949 48138]) ("erlang-font-lock-keywords-dollar" variable (:default-value (list (list "\\(\\$\\([^\\]\\|\\\\\\([^0-7^
]\\|[0-7]+\\|\\^[a-zA-Z]\\)\\)\\)" 1 (quote font-lock-string-face)))) nil [48140 48363]) ("erlang-font-lock-keywords-arrow" variable (:default-value (list (list "\\(->\\|:-\\)\\(\\s \\|$\\)" 2 (quote font-lock-function-name-face)))) nil [48365 48535]) ("erlang-font-lock-keywords-lc" variable (:default-value (list (list "\\(<-\\)\\(\\s \\|$\\)" 1 (quote font-lock-keyword-face)) (list "\\(||\\)\\(\\s \\|$\\)" 1 (quote font-lock-keyword-face)))) nil [48537 48770]) ("erlang-font-lock-keywords-keywords" variable (:default-value (list (list (concat "\\<\\(after\\|begin\\|c\\(atch\\|ase\\)\\|end\\|fun\\|if" "\\|of\\|receive\\|when\\|andalso\\|orelse\\|query\\)\\([^a-zA-Z0-9_]\\|$\\)") 1 (quote font-lock-keyword-face)))) nil [48772 49063]) ("erlang-font-lock-keywords-attr" variable (:default-value (list (list (concat "^\\(-" erlang-atom-regexp "\\)\\s *\\(\\.\\|(\\)") 1 (quote font-lock-function-name-face)))) nil [49065 49263]) ("erlang-font-lock-keywords-quotes" variable (:default-value (list (list "`\\([-+a-zA-Z0-9_:*][-+a-zA-Z0-9_:*]+\\)'" 1 (if erlang-font-lock-modern-p (quote font-lock-reference-face) (quote font-lock-keyword-face)) t))) nil [49265 49650]) ("erlang-font-lock-keywords-guards" variable (:default-value (list (list (concat "\\<\\(" "\\(is_\\)*\\(atom\\|function\\|binary\\|constant\\|float" "\\|integer\\|list\\|number\\|p\\(id\\|ort\\)\\|" "re\\(ference\\|cord\\)\\|tuple" "\\)\\)\\s *(") 1 (if erlang-font-lock-modern-p (quote font-lock-reference-face) (quote font-lock-keyword-face))))) nil [49710 50111]) ("erlang-font-lock-keywords-bifs" variable (:default-value (list (list (concat "\\<\\(" "a\\(bs\\|live\\|pply\\|tom_to_list\\)\\|" "binary_to_\\(list\\|term\\)\\|" "concat_binary\\|d\\(ate\\|isconnect_node\\)\\|" "e\\(lement\\|rase\\|xit\\)\\|" "float\\(\\|_to_list\\)\\|" "g\\(arbage_collect\\|et\\(\\|_keys\\)\\|roup_leader\\)\\|" "h\\(alt\\|d\\)\\|" "i\\(nte\\(ger_to_list\\|rnal_bif\\)\\|s_alive\\)\\|" "l\\(ength\\|i\\(nk\\|st_to_\\(atom\\|binary\\|float\\|integer" "\\|pid\\|tuple\\)\\)\\)\\|" "make_ref\\|no\\(de\\(\\|_\\(link\\|unlink\\)\\|s\\)\\|talive\\)\\|" "open_port\\|" "p\\(id_to_list\\|rocess\\(_\\(flag\\|info\\)\\|es\\)\\|ut\\)\\|" "r\\(egister\\(\\|ed\\)\\|ound\\)\\|" "s\\(e\\(lf\\|telement\\)\\|ize\\|" "p\\(awn\\(\\|_link\\)\\|lit_binary\\)\\|tatistics\\)\\|" "t\\(erm_to_binary\\|hrow\\|ime\\|l\\|" "r\\(ace\\|unc\\)\\|uple_to_list\\)\\|" "un\\(link\\|register\\)\\|whereis" "\\)\\s *(") 1 (quote font-lock-keyword-face)))) nil [50113 51209]) ("erlang-font-lock-keywords-macros" variable (:default-value (list (list (concat "?\\s *\\(" erlang-atom-regexp "\\|" erlang-variable-regexp "\\)\\>") 1 (if erlang-font-lock-modern-p (quote font-lock-reference-face) (quote font-lock-type-face))) (list (concat "^-\\(define\\|ifn?def\\)\\s *(\\s *\\(" erlang-atom-regexp "\\|" erlang-variable-regexp "\\)\\>") 2 (if erlang-font-lock-modern-p (quote font-lock-reference-face) (quote font-lock-type-face))))) nil [51211 51773]) ("erlang-font-lock-keywords-records" variable (:default-value (list (list (concat "#\\s *" erlang-atom-regexp "\\>") 1 (quote font-lock-type-face)) (list "\\<[0-9][0-9]?#\\([0-9a-fA_F]+\\)\\>" 1 nil t) (list (concat "^-record(\\s *" erlang-atom-regexp "\\>") 1 (quote font-lock-type-face)))) nil [51775 52209]) ("erlang-font-lock-keywords-vars" variable (:default-value (list (list (concat "\\<" erlang-variable-regexp "\\>") 1 (if erlang-font-lock-modern-p (quote font-lock-variable-name-face) (quote font-lock-type-face))))) nil [52211 52554]) ("erlang-font-lock-keywords-1" variable (:default-value (append erlang-font-lock-keywords-func erlang-font-lock-keywords-dollar erlang-font-lock-keywords-arrow erlang-font-lock-keywords-keywords)) nil [52557 53330]) ("erlang-font-lock-keywords-2" variable (:default-value (append erlang-font-lock-keywords-1 erlang-font-lock-keywords-attr erlang-font-lock-keywords-quotes erlang-font-lock-keywords-guards erlang-font-lock-keywords-bifs)) nil [53333 54134]) ("erlang-font-lock-keywords-3" variable (:default-value (append erlang-font-lock-keywords-2 erlang-font-lock-keywords-macros erlang-font-lock-keywords-records erlang-font-lock-keywords-vars)) nil [54137 54905]) ("erlang-font-lock-keywords" variable (:default-value erlang-font-lock-keywords-3) nil [54908 55556]) ("erlang-font-lock-syntax-table" variable nil nil [55559 55937]) ("or" code nil nil [56066 56149]) ("or" code nil nil [56264 56471]) ("or" code nil nil [56473 56680]) ("or" code nil nil [56682 56869]) ("or" code nil nil [56877 57438]) ("if" code nil nil [57461 57861]) ("erlang-version" function (:user-visible-flag t) nil [57866 58086]) ("erlang-mode" function (:user-visible-flag t) nil [58104 60979]) ("erlang-syntax-table-init" function nil nil [60982 62030]) ("erlang-keymap-init" function nil nil [62033 62220]) ("erlang-mode-commands" function (:arguments ("map")) nil [62223 63774]) ("erlang-electric-init" function nil nil [63777 64565]) ("erlang-mode-variables" function nil nil [64569 66236]) ("erlang-add-compilation-alist" function (:arguments ("alist")) nil [66574 67081]) ("erlang-font-lock-init" function nil nil [67084 68741]) ("erlang-font-lock-set-face" function (:arguments ("ks" "&rest" "faces")) nil [68787 70639]) ("erlang-font-lock-level-0" function (:user-visible-flag t) nil [70642 71289]) ("erlang-font-lock-level-1" function (:user-visible-flag t) nil [71292 72074]) ("erlang-font-lock-level-2" function (:user-visible-flag t) nil [72077 72859]) ("erlang-font-lock-level-3" function (:user-visible-flag t) nil [72862 73644]) ("erlang-menu-init" function nil nil [73648 74102]) ("erlang-menu-install" function (:arguments ("name" "items" "keymap" "&optional" "popup")) nil [74105 75640]) ("erlang-menu-make-keymap" function (:arguments ("name" "items")) nil [75643 77048]) ("erlang-menu-xemacs" function (:arguments ("name" "items" "&optional" "keymap")) nil [77051 78745]) ("erlang-menu-substitute" function (:arguments ("items" "alist")) nil [78748 79402]) ("erlang-menu-add-above" function (:arguments ("entry" "above" "items")) nil [79405 79937]) ("erlang-menu-add-below" function (:arguments ("entry" "below" "items" "&optional" "above-p")) nil [79940 81048]) ("erlang-menu-delete" function (:arguments ("entry" "items")) nil [81050 81237]) ("erlang-man-init" function (:user-visible-flag t) nil [81254 81870]) ("erlang-man-uninstall" function (:user-visible-flag t) nil [81873 82078]) ("erlang-man-make-top-menu" function (:arguments ("dir-list")) nil [82376 83262]) ("erlang-man-make-middle-menu" function (:arguments ("filelist")) nil [83411 84187]) ("erlang-man-make-menu" function (:arguments ("filelist")) nil [84190 84483]) ("erlang-man-make-menu-item" function (:arguments ("file")) nil [84486 84851]) ("erlang-man-get-files" function (:arguments ("dir")) nil [84854 84965]) ("erlang-man-module" function (:user-visible-flag t :arguments ("&optional" "module")) nil [84968 86207]) ("erlang-man-function-name" variable nil nil [86476 86665]) ("erlang-man-function" function (:user-visible-flag t :arguments ("&optional" "name")) nil [86667 88504]) ("erlang-man-patch-notify" function nil nil [88678 89597]) ("erlang-man-find-function" function (:arguments ("buf" "func")) nil [89600 90063]) ("erlang-man-display" function (:arguments ("file")) nil [90066 91226]) ("erlang-man-describe-error" function (:user-visible-flag t) nil [91229 92028]) ("erlang-skel-init" function (:user-visible-flag t) nil [92173 93391]) ("erlang-skel-make-menu-item" function (:arguments ("skel")) nil [93393 93729]) ("erlang-skel-insert" function (:arguments ("func")) nil [93810 93992]) ("erlang-skel-header" function (:arguments ("func")) nil [93994 94209]) ("erlang-skel-skip-blank" function nil nil [94264 94333]) ("erlang-skel-include" function (:arguments ("&rest" "args")) nil [94335 95015]) ("erlang-skel-separator" function (:arguments ("&optional" "percent")) nil [95017 95220]) ("erlang-skel-double-separator" function (:arguments ("&optional" "percent")) nil [95222 95432]) ("erlang-skel-dd-mmm-yyyy" function nil nil [95434 95756]) ("erlang-indent-command" function (:user-visible-flag t :arguments ("&optional" "whole-exp")) nil [95781 96619]) ("erlang-indent-line" function nil nil [96622 97646]) ("erlang-indent-region" function (:user-visible-flag t :arguments ("beg" "end")) nil [97649 99513]) ("erlang-indent-current-buffer" function (:user-visible-flag t) nil [99516 99722]) ("erlang-indent-function" function (:user-visible-flag t) nil [99725 99985]) ("erlang-indent-clause" function (:user-visible-flag t) nil [99988 100240]) ("erlang-push" function (:arguments ("x" "stack")) nil [100243 100315]) ("erlang-pop" function (:arguments ("stack")) nil [100316 100382]) ("erlang-caddr" function (:arguments ("x")) nil [100444 100488]) ("erlang-calculate-indent" function (:arguments ("&optional" "parse-start")) nil [100491 101010]) ("erlang-show-syntactic-information" function (:user-visible-flag t) nil [101012 101389]) ("erlang-partial-parse" function (:arguments ("from" "to" "&optional" "state")) nil [101392 106018]) ("erlang-calculate-stack-indent" function (:arguments ("indent-point" "state")) nil [106020 110385]) ("erlang-indent-find-base" function (:arguments ("stack" "indent-point" "&optional" "offset" "skip")) nil [110388 111047]) ("erlang-indent-find-preceding-expr" function nil nil [111087 111558]) ("erlang-skip-blank" function (:arguments ("&optional" "lim")) nil [111561 112033]) ("erlang-at-keyword" function nil nil [112035 112262]) ("erlang-at-operator" function nil nil [112264 112423]) ("erlang-comment-indent" function nil nil [112425 112811]) ("erlang-beginning-of-clause" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [113412 114276]) ("erlang-end-of-clause" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [114278 114831]) ("erlang-mark-clause" function (:user-visible-flag t) nil [114833 115321]) ("erlang-beginning-of-function" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [115323 116930]) ("erlang-end-of-function" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [116933 118055]) ("erlang-mark-function" function (:user-visible-flag t) nil [118057 118553]) ("erlang-pass-over-function" function nil nil [118555 118769]) ("erlang-name-of-function" function nil nil [118771 119022]) ("erlang-fill-paragraph" function (:user-visible-flag t :arguments ("&optional" "justify")) nil [119045 121217]) ("erlang-uncomment-region" function (:user-visible-flag t :arguments ("beg" "end")) nil [121220 121360]) ("erlang-generate-new-clause" function (:user-visible-flag t) nil [121363 122240]) ("erlang-clone-arguments" function (:user-visible-flag t) nil [122243 122677]) ("erlang-buffer-substring" function (:arguments ("beg" "end")) nil [122718 123012]) ("erlang-get-module" function nil nil [123015 123562]) ("erlang-get-module-from-file-name" function (:arguments ("&optional" "file")) nil [123565 124346]) ("erlang-get-function-arity-list" function nil nil [124406 125678]) ("erlang-get-export" function nil nil [125771 126178]) ("erlang-get-import" function nil nil [126181 127154]) ("erlang-get-function-name" function (:arguments ("&optional" "arg")) nil [127157 127720]) ("erlang-get-function-arrow" function nil nil [127723 128239]) ("erlang-get-function-arity" function nil nil [128241 128902]) ("erlang-get-function-arguments" function nil nil [128904 129265]) ("erlang-get-function-under-point" function nil nil [129268 130708]) ("erlang-add-quotes-if-needed" function (:arguments ("str")) nil [130760 130970]) ("erlang-remove-quotes" function (:arguments ("str")) nil [130973 131224]) ("erlang-check-module-name-init" function nil nil [131545 132395]) ("erlang-check-module-name" function nil nil [132398 133587]) ("erlang-electric-semicolon" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [133616 135354]) ("erlang-electric-comma" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [135357 136368]) ("erlang-electric-lt" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [136370 137195]) ("erlang-after-bitsyntax-close" function nil nil [137197 137521]) ("erlang-after-arrow" function nil nil [137525 137966]) ("erlang-electric-gt" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [137969 139046]) ("erlang-electric-arrow off" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [139053 140350]) ("erlang-electric-newline" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [140353 141678]) ("erlang-test-criteria-list" function (:arguments ("criteria")) nil [141681 142708]) ("erlang-in-literal" function (:arguments ("&optional" "lim")) nil [142711 143246]) ("erlang-at-end-of-function-p" function nil nil [143249 143518]) ("erlang-stop-when-inside-argument-list" function nil nil [143521 144281]) ("erlang-stop-when-at-guard" function nil nil [144284 144634]) ("erlang-next-lines-empty-p" function nil nil [144637 145210]) ("erlang-at-keyword-end-p" function nil nil [145213 145440]) ("if" code nil nil [145622 145712]) ("erlang-tags-function-alist" variable (:default-value (quote ((find-tag . erlang-find-tag) (find-tag-other-window . erlang-find-tag-other-window) (find-tag-regexp . erlang-find-tag-regexp) (find-tag-other-frame . erlang-find-tag-other-frame)))) nil [145731 146057]) ("erlang-tags-installed" variable nil nil [146059 146147]) ("erlang-tags-file-list" variable (:default-value (quote nil)) nil [146148 146254]) ("erlang-tags-completion-table" variable nil nil [146255 146374]) ("erlang-tags-buffer-installed-p" variable nil nil [146375 146482]) ("erlang-tags-buffer-list" variable (:default-value (quote nil)) nil [146483 146550]) ("erlang-tags-orig-completion-table" variable nil nil [146551 146648]) ("erlang-tags-orig-tag-order" variable nil nil [146649 146736]) ("erlang-tags-orig-regexp-tag-order" variable nil nil [146737 146838]) ("erlang-tags-orig-search-function" variable nil nil [146839 146938]) ("erlang-tags-orig-regexp-search-function" variable nil nil [146939 147052]) ("erlang-tags-orig-format-hooks" variable nil nil [147053 147148]) ("erlang-tags-init" function (:user-visible-flag t) nil [147150 148250]) ("erlang-tags-define-keys" function (:arguments ("map")) nil [148467 148981]) ("erlang-find-tag-default" function nil nil [149188 149531]) ("erlang-find-tag" function (:user-visible-flag t :arguments ("modtagname" "&optional" "next-p" "regexp-p")) nil [149605 149942]) ("erlang-find-tag-other-window" function (:user-visible-flag t :arguments ("tagname" "&optional" "next-p" "regexp-p")) nil [150019 151073]) ("erlang-find-tag-other-frame" function (:user-visible-flag t :arguments ("tagname" "&optional" "next-p")) nil [151076 151363]) ("erlang-find-tag-regexp" function (:user-visible-flag t :arguments ("regexp" "&optional" "next-p" "other-window")) nil [151366 151786]) ("erlang-find-next-tag" function nil nil [151844 152034]) ("erlang-find-tag-noselect" function (:user-visible-flag t :arguments ("modtagname" "&optional" "next-p" "regexp-p")) nil [152779 155815]) ("erlang-tag-interactive" function (:arguments ("prompt")) nil [156092 156674]) ("erlang-tags-install-module-check" function nil nil [157037 157820]) ("erlang-tags-install-local" function nil nil [157823 159044]) ("erlang-tags-remove-module-check" function nil nil [159047 159616]) ("erlang-tags-remove-local" function nil nil [159619 160256]) ("erlang-tags-recognize-tags-table" function nil nil [160259 160576]) ("erlang-tags-search-forward" function (:arguments ("tag" "&optional" "bound" "noerror" "count")) nil [160579 161013]) ("erlang-tags-regexp-search-forward" function (:arguments ("tag" "&optional" "bound" "noerror" "count")) nil [161016 161465]) ("erlang-tag-match-module-p" function (:arguments ("tag")) nil [161647 161754]) ("erlang-tag-match-module-regexp-p" function (:arguments ("tag")) nil [161756 161877]) ("erlang-tag-match-module-common-p" function (:arguments ("tag" "order")) nil [161879 162443]) ("erlang-complete-tag" function (:user-visible-flag t) nil [162662 163565]) ("erlang-tags-complete-tag" function (:arguments ("string" "predicate" "what")) nil [163762 164129]) ("erlang-tags-completion-table" function nil nil [164338 164743]) ("erlang-tags-completion-table-1" function nil nil [164746 165103]) ("erlang-etags-tags-completion-table" function nil nil [165430 166915]) ("erlang-shell-function" variable (:default-value (quote inferior-erlang)) nil [166989 167156]) ("erlang-shell-display-function" variable (:default-value (quote inferior-erlang-run-or-select)) nil [167158 167346]) ("erlang-compile-function" variable (:default-value (quote inferior-erlang-compile)) nil [167348 167526]) ("erlang-compile-display-function" variable (:default-value (quote inferior-erlang-run-or-select)) nil [167528 167719]) ("erlang-next-error-function" variable (:default-value (quote inferior-erlang-next-error)) nil [167721 167903]) ("erlang-shell" function (:user-visible-flag t) nil [167921 168234]) ("fset" code nil nil [168447 168479]) ("erlang-shell-display" function (:user-visible-flag t) nil [168482 168627]) ("erlang-compile" function (:user-visible-flag t) nil [168645 168778]) ("erlang-compile-display" function (:user-visible-flag t) nil [168781 168917]) ("erlang-next-error" function (:user-visible-flag t) nil [168920 169074]) ("erlang-shell-buffer-name" variable (:user-visible-flag t :default-value "*erlang*") nil [169322 169413]) ("erlang-shell-mode-map" variable (:user-visible-flag t) nil [169416 169485]) ("erlang-shell-mode-hook" variable (:user-visible-flag t) nil [169488 170089]) ("erlang-input-ring-file-name" variable (:user-visible-flag t :default-value "~/.erlang_history") nil [170092 170225]) ("erlang-shell-mode" function (:user-visible-flag t) nil [170228 172175]) ("erlang-shell-mode-commands" function (:arguments ("map")) nil [172178 172512]) ("inferior-erlang-display-buffer-any-frame" variable (:user-visible-flag t) nil [172584 172778]) ("inferior-erlang-shell-type" variable (:default-value (quote newshell)) nil [172780 173095]) ("inferior-erlang-machine" variable (:user-visible-flag t :default-value "erl") nil [173097 173170]) ("inferior-erlang-machine-options" variable (:user-visible-flag t :default-value (quote nil)) nil [173172 173305]) ("inferior-erlang-process-name" variable (:user-visible-flag t :default-value "inferior-erlang") nil [173307 173408]) ("inferior-erlang-buffer-name" variable (:user-visible-flag t :default-value erlang-shell-buffer-name) nil [173410 173516]) ("inferior-erlang-prompt-timeout" variable (:user-visible-flag t :default-value 60) nil [173518 173827]) ("inferior-erlang-process" variable nil nil [173829 173918]) ("inferior-erlang-buffer" variable nil nil [173920 174007]) ("inferior-erlang" function (:user-visible-flag t) nil [174024 175469]) ("inferior-erlang-run-or-select" function (:user-visible-flag t) nil [175472 175705]) ("inferior-erlang-display-buffer" function (:user-visible-flag t :arguments ("&optional" "select")) nil [175708 177096]) ("inferior-erlang-running-p" function nil nil [177099 177356]) ("inferior-erlang-window" function (:arguments ("&optional" "all-frames")) nil [177359 177668]) ("inferior-erlang-wait-prompt" function nil nil [177671 178420]) ("inferior-erlang-send-command" function (:arguments ("cmd" "&optional" "hist")) nil [178423 179932]) ("inferior-erlang-strip-delete" function (:user-visible-flag t :arguments ("&optional" "s")) nil [179935 180455]) ("inferior-erlang-strip-ctrl-m" function (:user-visible-flag t :arguments ("&optional" "string")) nil [180519 181040]) ("inferior-erlang-compile" function (:user-visible-flag t) nil [181043 182682]) ("inferior-erlang-next-error" function (:user-visible-flag t :arguments ("&optional" "argp")) nil [182925 183546]) ("inferior-erlang-change-directory" function (:user-visible-flag t :arguments ("&optional" "dir")) nil [183549 184003]) ("erlang-obsolete" function (:arguments ("sym" "newdef")) nil [184223 184538]) ("erlang-obsolete" code nil nil [184541 184608]) ("erlang-obsolete" code nil nil [184609 184691]) ("erlang-obsolete" code nil nil [184692 184747]) ("erlang-obsolete" code nil nil [184748 184805]) ("erlang-obsolete" code nil nil [184806 184879]) ("erlang-obsolete" code nil nil [184880 184941]) ("erlang-obsolete" code nil nil [184942 184999]) ("erlang-obsolete" code nil nil [185000 185077]) ("erlang-obsolete" code nil nil [185078 185143]) ("erlang-obsolete" code nil nil [185144 185205]) ("erlang-obsolete" code nil nil [185206 185275]) ("erlang-obsolete" code nil nil [185276 185343]) ("erlang" package nil nil [185361 185378]) ("run-hooks" code nil nil [185380 185409]))
    :file "erlang.el"
    :pointmax 185435
    )
   (semanticdb-table "ruby-mode.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("ruby-mode-revision" variable (:constant-flag t :default-value "$Revision: 1.95 $") nil [135 184]) ("ruby-mode-version" variable (:constant-flag t :default-value (progn (string-match "[0-9.]+" ruby-mode-revision) (substring ruby-mode-revision (match-beginning 0) (match-end 0)))) nil [186 339]) ("ruby-block-beg-re" variable (:constant-flag t :default-value "class\\|module\\|def\\|if\\|unless\\|case\\|while\\|until\\|for\\|begin\\|do") nil [341 453]) ("ruby-non-block-do-re" variable (:constant-flag t :default-value "\\(while\\|until\\|for\\|rescue\\)\\>[^_]") nil [455 535]) ("ruby-indent-beg-re" variable (:constant-flag t :default-value "\\(\\s *\\(class\\|module\\|def\\)\\)\\|if\\|unless\\|case\\|while\\|until\\|for\\|begin") nil [537 664]) ("ruby-modifier-beg-re" variable (:constant-flag t :default-value "if\\|unless\\|while\\|until") nil [666 732]) ("ruby-modifier-re" variable (:constant-flag t :default-value (concat ruby-modifier-beg-re "\\|rescue")) nil [734 808]) ("ruby-block-mid-re" variable (:constant-flag t :default-value "then\\|else\\|elsif\\|when\\|rescue\\|ensure") nil [810 890]) ("ruby-block-op-re" variable (:constant-flag t :default-value "and\\|or\\|not") nil [892 941]) ("ruby-block-hanging-re" variable (:constant-flag t :default-value (concat ruby-modifier-beg-re "\\|" ruby-block-op-re)) nil [943 1033]) ("ruby-block-end-re" variable (:constant-flag t :default-value "\\<end\\>\\|;;") nil [1035 1080]) ("ruby-here-doc-beg-re" variable (:constant-flag t :default-value "<<\\(-\\)?\\(\\([a-zA-Z0-9_]+\\)\\|[\"]\\([^\"]+\\)[\"]\\|[']\\([^']+\\)[']\\)") nil [1082 1196]) ("ruby-here-doc-end-match" function nil nil [1198 1379]) ("ruby-delimiter" variable (:constant-flag t :default-value (concat "[?$/%(){}#\"'`.:]\\|<<\\|\\[\\|\\]\\|\\<\\(" ruby-block-beg-re "\\)\\>\\|" ruby-block-end-re "\\|^=begin\\|" ruby-here-doc-beg-re)) nil [1381 1560]) ("ruby-negative" variable (:constant-flag t :default-value (concat "^[ 	]*\\(\\(" ruby-block-mid-re "\\)\\>\\|" ruby-block-end-re "\\|}\\|\\]\\)")) nil [1562 1685]) ("ruby-operator-chars" variable (:constant-flag t :default-value "-,.+*/%&|^~=<>:") nil [1687 1735]) ("ruby-operator-re" variable (:constant-flag t :default-value (concat "[" ruby-operator-chars "]")) nil [1736 1800]) ("ruby-symbol-chars" variable (:constant-flag t :default-value "a-zA-Z0-9_") nil [1802 1843]) ("ruby-symbol-re" variable (:constant-flag t :default-value (concat "[" ruby-symbol-chars "]")) nil [1844 1904]) ("ruby-mode-abbrev-table" variable nil nil [1906 1987]) ("define-abbrev-table" code nil nil [1989 2037]) ("ruby-mode-map" variable nil nil [2039 2093]) ("if" code nil nil [2095 2970]) ("ruby-mode-syntax-table" variable nil nil [2972 3053]) ("if" code nil nil [3055 4570]) ("ruby-indent-tabs-mode" variable (:user-visible-flag t) nil [4572 4705]) ("ruby-indent-level" variable (:user-visible-flag t :default-value 2) nil [4707 4805]) ("ruby-comment-column" variable (:user-visible-flag t :default-value 32) nil [4807 4908]) ("ruby-deep-arglist" variable (:user-visible-flag t :default-value t) nil [4910 5059]) ("ruby-deep-indent-paren" variable (:user-visible-flag t :default-value (quote (40 91 93 t))) nil [5061 5255]) ("ruby-deep-indent-paren-style" variable (:default-value (quote space)) nil [5257 5374]) ("cl" include nil nil [5395 5408]) ("ruby-imenu-create-index-in-block" function (:arguments ("prefix" "beg" "end")) nil [5410 6737]) ("ruby-imenu-create-index" function nil nil [6739 6841]) ("ruby-accurate-end-of-block" function (:arguments ("&optional" "end")) nil [6843 7053]) ("ruby-mode-variables" function nil nil [7055 8090]) ("ruby-mode" function (:user-visible-flag t) nil [8107 8845]) ("ruby-current-indentation" function nil nil [8847 8972]) ("ruby-indent-line" function (:arguments ("&optional" "flag")) nil [8974 9108]) ("ruby-indent-command" function nil nil [9110 9179]) ("ruby-indent-to" function (:arguments ("x")) nil [9181 9694]) ("ruby-special-char-p" function (:arguments ("&optional" "pnt")) nil [9696 9976]) ("ruby-expr-beg" function (:arguments ("&optional" "option")) nil [9978 11037]) ("ruby-forward-string" function (:arguments ("term" "&optional" "end" "no-error" "expand")) nil [11039 11580]) ("ruby-deep-indent-paren-p" function (:arguments ("c")) nil [11582 11942]) ("ruby-parse-partial" function (:arguments ("&optional" "end" "in-string" "nest" "depth" "pcol" "indent")) nil [11944 17985]) ("ruby-parse-region" function (:arguments ("start" "end")) nil [17987 18443]) ("ruby-indent-size" function (:arguments ("pos" "nest")) nil [18445 18524]) ("ruby-calculate-indent" function (:arguments ("&optional" "parse-start")) nil [18526 23893]) ("ruby-electric-brace" function (:arguments ("arg")) nil [23895 24077]) ("defun-region-command" function (:arguments ("func" "args" "&rest" "body")) nil [24100 24419]) ("defun-region-command" code nil nil [24422 24778]) ("ruby-beginning-of-indent" function nil nil [24780 24945]) ("defun-region-command" code nil nil [24947 25301]) ("ruby-move-to-block" function (:arguments ("n")) nil [25303 26184]) ("defun-region-command" code nil nil [26186 26351]) ("defun-region-command" code nil nil [26353 26507]) ("defun-region-command" code nil nil [26509 27804]) ("defun-region-command" code nil nil [27806 29089]) ("ruby-reindent-then-newline-and-indent" function nil nil [29091 29342]) ("fset" code nil nil [29344 29407]) ("ruby-decomment-region" function (:arguments ("beg" "end")) nil [29409 29641]) ("ruby-insert-end" function nil nil [29643 29741]) ("ruby-mark-defun" function (:user-visible-flag t) nil [29743 29993]) ("ruby-indent-exp" function (:user-visible-flag t :arguments ("&optional" "shutup-p")) nil [29995 30748]) ("ruby-add-log-current-method" function nil nil [30750 31772]) ("cond" code nil nil [31774 38670]) ("ruby-mode" package nil nil [38673 38693]))
    :file "ruby-mode.el"
    :pointmax 38694
    )
   (semanticdb-table "rcodetools.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("xmpfilter-command-name" variable (:default-value "ruby -S xmpfilter --dev") nil [212 301]) ("rct-doc-command-name" variable (:default-value "ruby -S rct-doc --dev") nil [302 385]) ("rct-complete-command-name" variable (:default-value "ruby -S rct-complete --dev") nil [386 484]) ("rct-option-history" variable nil nil [485 516]) ("rct-option-local" variable nil nil [542 571]) ("make-variable-buffer-local" code nil nil [586 632]) ("comment-dwim" function (:arguments ("around" "rct-hack" "activate")) nil [634 897]) ("rct-current-line" function nil nil [1015 1164]) ("rct-save-position" function (:arguments ("proc")) nil [1166 1519]) ("rct-interactive" function nil nil [1521 1906]) ("xmp" function (:user-visible-flag t :arguments ("&optional" "option")) nil [1910 2181]) ("xmpfilter-command" function (:arguments ("&optional" "option")) nil [2183 2711]) ("rct-method-completion-table" variable nil nil [2729 2769]) ("rct-complete-symbol-function" variable (:default-value (quote rct-complete-symbol--normal)) nil [2780 2887]) ("rct-complete-symbol" function (:user-visible-flag t :arguments ("&optional" "option")) nil [2958 3336]) ("rct-complete-symbol--normal" function (:user-visible-flag t :arguments ("&optional" "option")) nil [3338 4335]) ("rct-exec-and-eval" function (:arguments ("command" "opt")) nil [4399 4962]) ("rct-try-completion" function nil nil [4964 5103]) ("ri" function (:prototype-flag t :user-visible-flag t) nil [5121 5151]) ("rct-find-tag-if-available" variable (:default-value t) nil [5152 5289]) ("rct-ri" function (:user-visible-flag t :arguments ("&optional" "option")) nil [5290 5703]) ("rct-find-tag-or-ri" function (:arguments ("fullname")) nil [5705 6024]) ("rcodetools" package nil nil [6026 6047]))
    :file "rcodetools.el"
    :pointmax 6048
    :unmatched-syntax 'nil
    )
   (semanticdb-table "icicles-rcodetools.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("icicles" include nil nil [200 218]) ("rcodetools" include nil nil [219 240]) ("setq" code nil nil [242 307]) ("icicle-define-command" code nil nil [308 1490]) ("icicles-rcodetools" package nil nil [1492 1521]))
    :file "icicles-rcodetools.el"
    :pointmax 1522
    )
   (semanticdb-table "mic-paren.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("mic-paren-version" variable (:default-value "3.7") nil [15271 15337]) ("condition-case" code nil nil [15515 15574]) ("unless" code nil nil [15577 15646]) ("unless" code nil nil [15649 15771]) ("unless" code nil nil [15774 15905]) ("defgroup" code nil nil [16019 16157]) ("paren-priority" variable (:user-visible-flag t :default-value (quote both)) nil [16159 16993]) ("paren-overlay-priority" variable (:user-visible-flag t :default-value 999) nil [16995 17424]) ("paren-sexp-mode" variable (:user-visible-flag t) nil [17426 18138]) ("paren-highlight-at-point" variable (:user-visible-flag t :default-value t) nil [18141 18467]) ("paren-highlight-offscreen" variable (:user-visible-flag t) nil [18470 18926]) ("paren-display-message" variable (:user-visible-flag t :default-value (quote only)) nil [18929 19425]) ("paren-message-linefeed-display" variable (:user-visible-flag t :default-value " RET ") nil [19427 20150]) ("paren-message-show-linenumber" variable (:user-visible-flag t :default-value (quote sexp)) nil [20152 20998]) ("paren-message-no-match" variable (:user-visible-flag t :default-value t) nil [21001 21222]) ("paren-message-truncate-lines" variable (:user-visible-flag t :default-value t) nil [21225 21439]) ("paren-ding-unmatched" variable (:user-visible-flag t) nil [21442 21698]) ("paren-delay" variable (:user-visible-flag t) nil [21701 22759]) ("paren-dont-touch-blink" variable (:user-visible-flag t) nil [22762 23047]) ("paren-dont-load-timer" variable (:user-visible-flag t :default-value (not (string-match "XEmacs\\|Lucid" emacs-version))) nil [23050 23536]) ("paren-bind-modified-sexp-functions" variable (:user-visible-flag t :default-value t) nil [23539 24418]) ("paren-face-match" variable (:default-value (quote ((((class color)) (:background "turquoise")) (t (:background "gray"))))) nil [24501 24701]) ("paren-face-mismatch" variable (:default-value (quote ((((class color)) (:foreground "white" :background "purple")) (t (:reverse-video t))))) nil [24703 24924]) ("paren-face-no-match" variable (:default-value (quote ((((class color)) (:foreground "black" :background "yellow")) (t (:reverse-video t))))) nil [24926 25146]) ("paren-match-face" variable (:user-visible-flag t :default-value (quote paren-face-match)) nil [25149 25293]) ("paren-mismatch-face" variable (:user-visible-flag t :default-value (quote paren-face-mismatch)) nil [25296 25452]) ("paren-no-match-face" variable (:user-visible-flag t :default-value (quote paren-face-no-match)) nil [25455 25611]) ("paren-match-quoted-paren" variable (:user-visible-flag t) nil [25860 27222]) ("make-variable-buffer-local" code nil nil [27224 27278]) ("paren-match-paired-delimiter" variable (:user-visible-flag t) nil [27280 27864]) ("make-variable-buffer-local" code nil nil [27866 27924]) ("paren-open-paren-context-backward" variable (:user-visible-flag t) nil [27926 29335]) ("make-variable-buffer-local" code nil nil [29337 29400]) ("mic-paren-original-keybinding-of-sexp-functions" variable (:constant-flag t :default-value (list (car (where-is-internal (quote forward-sexp))) (car (where-is-internal (quote backward-sexp))))) nil [29402 29558]) ("if" code nil nil [29730 30311]) ("if" code nil nil [30454 30660]) ("if" code nil nil [30662 31005]) ("mic-paren-nolog-message" function (:arguments ("&rest" "args")) nil [31007 31754]) ("paren-activate" function (:user-visible-flag t) nil [31868 35098]) ("paren-deactivate" function (:user-visible-flag t) nil [35117 36038]) ("paren-toggle-matching-paired-delimiter" function (:user-visible-flag t :arguments ("arg" "&optional" "no-message")) nil [36055 36798]) ("paren-toggle-matching-quoted-paren" function (:user-visible-flag t :arguments ("arg" "&optional" "no-message")) nil [36816 38557]) ("paren-toggle-open-paren-context" function (:user-visible-flag t :arguments ("arg")) nil [38574 39006]) ("paren-forward-sexp" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [39023 40124]) ("paren-backward-sexp" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [40141 40382]) ("mic-paren-backw-overlay" variable (:default-value (mic-make-overlay (point-min) (point-min))) nil [40490 40711]) ("mic-paren-point-overlay" variable (:default-value (mic-make-overlay (point-min) (point-min))) nil [40713 40865]) ("mic-paren-forw-overlay" variable (:default-value (mic-make-overlay (point-min) (point-min))) nil [40867 41085]) ("mic-paren-idle-timer" variable nil nil [41087 41200]) ("mic-paren-previous-location" variable (:default-value [nil nil nil]) nil [41202 41359]) ("mic-paren-command-hook" function nil nil [41463 41912]) ("mic-paren-command-idle-hook" function nil nil [41914 42174]) ("mic-paren-overlay-set" function (:arguments ("overlay" "face")) nil [42266 42497]) ("mic-paren-minibuffer-setup-hook" function nil nil [42499 42584]) ("mic-paren-minibuffer-exit-hook" function nil nil [42586 42671]) ("mic-paren-highlight" function nil nil [42674 56403]) ("mic-paren-sexp-mode-p" function (:arguments ("mismatch")) nil [56461 56749]) ("mic-paren-horizontal-pos-visible-p" function (:arguments ("match-pos")) nil [56809 57218]) ("mic-paren-get-matching-open-text" function (:arguments ("open")) nil [57715 59879]) ("mic-paren-get-matching-close-text" function (:arguments ("close")) nil [59887 60981]) ("mic-paren-is-new-location" function nil nil [60985 61417]) ("mic-paren-is-following-char-quoted" function (:arguments ("pnt")) nil [61420 61802]) ("mic-paren-uncharquote" function (:arguments ("pnt")) nil [61804 62401]) ("mic-paren-recharquote" function (:arguments ("charquote")) nil [62403 62718]) ("or" code nil nil [62890 63005]) ("mic-paren" package nil nil [63007 63027]) ("paren" package nil nil [63028 63044]))
    :file "mic-paren.el"
    :pointmax 63073
    )
   (semanticdb-table "parenface.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("paren-face" variable (:default-value (quote paren-face)) nil [356 387]) ("paren-face" variable (:default-value (quote ((((class color)) (:foreground "DimGray"))))) nil [389 514]) ("paren-face-add-support" function (:arguments ("keywords")) nil [516 820]) ("scheme-font-lock-keywords-2" variable nil nil [871 911]) ("lisp-font-lock-keywords-2" variable nil nil [914 952]) ("add-hook" code nil nil [955 1046]) ("add-hook" code nil nil [1047 1136]) ("add-hook" code nil nil [1137 1226]) ("add-hook" code nil nil [1227 1316]) ("parenface" package nil nil [1318 1338]))
    :file "parenface.el"
    :pointmax 1366
    )
   (semanticdb-table "color-theme.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("cl" include nil nil [8817 8830]) ("cus-face" include nil nil [8929 8948]) ("wid-edit" include nil nil [8949 8968]) ("color-theme-maintainer-address" variable (:constant-flag t :default-value "zedek@gnu-rox.org") nil [9009 9112]) ("cond" code nil nil [9168 9376]) ("color-theme-xemacs-p" variable (:default-value (string-match "XEmacs" emacs-version)) nil [9378 9476]) ("cond" code nil nil [10086 10460]) ("color-theme-alist" function (:arguments ("plist")) nil [10462 11155]) ("defgroup" code nil nil [11188 11369]) ("color-theme-legal-frame-parameters" variable (:default-value "\\(color\\|mode\\)$") nil [11371 11844]) ("color-theme-legal-variables" variable (:default-value "\\(color\\|face\\)$") nil [11846 12174]) ("color-theme-illegal-faces" variable (:default-value "^w3-") nil [12176 12493]) ("color-theme-illegal-default-attributes" variable (:default-value (quote (:family :height :width))) nil [12495 12795]) ("color-theme-is-global" variable (:user-visible-flag t :default-value t) nil [12797 14100]) ("color-theme-is-cumulative" variable (:user-visible-flag t :default-value t) nil [14102 14347]) ("color-theme-mode-hook" variable nil nil [14349 14453]) ("color-theme-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (kbd "RET") (quote color-theme-install-at-point)) (define-key map (kbd "c") (quote list-colors-display)) (define-key map (kbd "d") (quote color-theme-describe)) (define-key map (kbd "f") (quote list-faces-display)) (define-key map (kbd "i") (quote color-theme-install-at-point)) (define-key map (kbd "l") (quote color-theme-install-at-point-for-current-frame)) (define-key map (kbd "p") (quote color-theme-print)) (define-key map (kbd "q") (quote bury-buffer)) (define-key map (kbd "?") (quote color-theme-describe)) (if color-theme-xemacs-p (define-key map (kbd "<button2>") (quote color-theme-install-at-mouse)) (define-key map (kbd "<mouse-2>") (quote color-theme-install-at-mouse))) map)) nil [14455 15268]) ("color-theme-buffer-name" variable (:default-value "*Color Theme Selection*") nil [15270 15374]) ("color-theme-original-frame-alist" variable nil nil [15376 15479]) ("color-theme-history" variable nil nil [15481 15563]) ("color-theme-history-max-length" variable nil nil [15565 15864]) ("color-theme-counter" variable nil nil [15866 16045]) ("color-theme-add-to-history" function (:arguments ("name")) nil [16047 16549]) ("color-themes" variable (:default-value (quote ((color-theme-aalto-dark "Aalto Dark" "Jari Aalto <jari.aalto@poboxes.com>") (color-theme-aalto-light "Aalto Light" "Jari Aalto <jari.aalto@poboxes.com>") (color-theme-aliceblue "Alice Blue" "Girish Bharadwaj <girishb@gbvsoft.com>") (color-theme-andreas "Andreas" "Andreas Busch <Andreas.Busch@politics.ox.ac.uk>") (color-theme-arjen "Arjen" "Arjen Wiersma <arjen@wiersma.org>") (color-theme-beige-diff "Beige Diff" "Alex Schroeder <alex@gnu.org>" t) (color-theme-bharadwaj "Bharadwaj" "Girish Bharadwaj <girishb@gbvsoft.com>") (color-theme-bharadwaj-slate "Bharadwaj Slate" "Girish Bharadwaj <girishb@gbvsoft.com>") (color-theme-billw "Billw" "Bill White <billw@wolfram.com>") (color-theme-black-on-gray "BlackOnGray" "Sudhir Bhojwani <sbhojwani@altoweb.com>") (color-theme-blippblopp "Blipp Blopp" "Thomas Sicheritz-Ponten<thomas@biopython.org>") (color-theme-simple-1 "Black" "Jonadab <jonadab@bright.net>") (color-theme-blue-erc "Blue ERC" "Alex Schroeder <alex@gnu.org>" t) (color-theme-blue-gnus "Blue Gnus" "Alex Schroeder <alex@gnu.org>" t) (color-theme-blue-mood "Blue Mood" "Nelson Loyola <nloyola@yahoo.com>") (color-theme-blue-sea "Blue Sea" "Alex Schroeder <alex@gnu.org>") (color-theme-calm-forest "Calm Forest" "Artur Hefczyc <kobit@plusnet.pl>") (color-theme-charcoal-black "Charcoal Black" "Lars Chr. Hausmann <jazz@zqz.dk>") (color-theme-goldenrod "Cheap Goldenrod" "Alex Schroeder <alex@gnu.org>") (color-theme-clarity "Clarity and Beauty" "Richard Wellum <rwellum@cisco.com>") (color-theme-classic "Classic" "Frederic Giroud <postcard@worldonline.fr>") (color-theme-comidia "Comidia" "Marcelo Dias de Toledo <mtole@ig.com.br>") (color-theme-jsc-dark "Cooper Dark" "John S Cooper <John.Cooper@eu.citrix.com>") (color-theme-jsc-light "Cooper Light" "John S Cooper <John.Cooper@eu.citrix.com>") (color-theme-jsc-light2 "Cooper Light 2" "John S Cooper <John.Cooper@eu.citrix.com>") (color-theme-dark-blue "Dark Blue" "Chris McMahan <cmcmahan@one.net>") (color-theme-dark-blue2 "Dark Blue 2" "Chris McMahan <cmcmahan@one.net>") (color-theme-dark-green "Dark Green" "eddy_woody@hotmail.com") (color-theme-dark-laptop "Dark Laptop" "Laurent Michel <ldm@cs.brown.edu>") (color-theme-deep-blue "Deep Blue" "Tomas Cerha <cerha@brailcom.org>") (color-theme-digital-ofs1 "Digital OFS1" "Gareth Owen <gowen@gwowen.freeserve.co.uk>") (color-theme-euphoria "Euphoria" "oGLOWo@oGLOWo.cjb.net") (color-theme-feng-shui "Feng Shui" "Walter Higgins <walterh@rocketmail.com>") (color-theme-fischmeister "Fischmeister" "Sebastian Fischmeister <sfischme@nexus.lzk.tuwien.ac.at>") (color-theme-gnome "Gnome" "Jonadab <jonadab@bright.net>") (color-theme-gnome2 "Gnome 2" "Alex Schroeder <alex@gnu.org>") (color-theme-gray1 "Gray1" "Paul Pulli <P.Pulli@motorola.com>") (color-theme-gray30 "Gray30" "Girish Bharadwaj <girishb@gbvsoft.com>") (color-theme-kingsajz "Green Kingsajz" "Olgierd `Kingsajz' Ziolko <kingsajz@rpg.pl>") (color-theme-greiner "Greiner" "Kevin Greiner <kgreiner@mapquest.com>") (color-theme-gtk-ide "GTK IDE" "Gordon Messmer <gordon@dragonsdawn.net>") (color-theme-high-contrast "High Contrast" "Alex Schroeder <alex@gnu.org>") (color-theme-hober "Hober" "Edward O'Connor <ted@oconnor.cx>") (color-theme-infodoc "Infodoc" "Frederic Giroud <postcard@worldonline.fr>") (color-theme-jb-simple "JB Simple" "jeff@dvns.com") (color-theme-jedit-grey "Jedit Grey" "Gordon Messmer <gordon@dragonsdawn.net>") (color-theme-jonadabian "Jonadab" "Jonadab <jonadab@bright.net>") (color-theme-jonadabian-slate "Jonadabian Slate" "Jonadab <jonadab@bright.net>") (color-theme-katester "Katester" "Higgins_Walter@emc.com") (color-theme-late-night "Late Night" "Alex Schroeder <alex@gnu.org>") (color-theme-lawrence "Lawrence" "lawrence mitchell <wence@gmx.li>") (color-theme-lethe "Lethe" "Ivica Loncar <ivica.loncar@srk.fer.hr>") (color-theme-ld-dark "Linh Dang Dark" "Linh Dang <linhd@nortelnetworks.com>") (color-theme-marine "Marine" "Girish Bharadwaj <girishb@gbvsoft.com>") (color-theme-matrix "Matrix" "Walter Higgins <walterh@rocketmail.com>") (color-theme-marquardt "Marquardt" "Colin Marquardt <colin@marquardt-home.de>") (color-theme-midnight "Midnight" "Gordon Messmer <gordon@dragonsdawn.net>") (color-theme-mistyday "Misty Day" "Hari Kumar <Hari.Kumar@mtm.kuleuven.ac.be>") (color-theme-montz "Montz" "Brady Montz <bradym@becomm.com>") (color-theme-oswald "Oswald" "Tom Oswald <toswald@sharplabs.com>") (color-theme-parus "Parus" "Jon K Hellan <hellan@acm.org>") (color-theme-pierson "Pierson" "Dan L. Pierson <dan@sol.control.com>") (color-theme-ramangalahy "Ramangalahy" "Solofo Ramangalahy <solofo@irisa.fr>") (color-theme-raspopovic "Raspopovic" "Pedja Raspopovic <pedja@lsil.com>") (color-theme-resolve "Resolve" "Damien Elmes <resolve@repose.cx>") (color-theme-retro-green "Retro Green" "Alex Schroeder <alex@gnu.org>") (color-theme-retro-orange "Retro Orange" "Alex Schroeder <alex@gnu.org>") (color-theme-robin-hood "Robin Hood" "Alex Schroeder <alex@gnu.org>") (color-theme-rotor "Rotor" "Jinwei Shen <shenjw@wam.umd.edu>") (color-theme-ryerson "Ryerson" "Luis Fernandes <elf@ee.ryerson.ca>") (color-theme-salmon-diff "Salmon Diff" "Alex Schroeder <alex@gnu.org>" t) (color-theme-salmon-font-lock "Salmon Font-Lock" "Alex Schroeder <alex@gnu.org>" t) (color-theme-scintilla "Scintilla" "Gordon Messmer <gordon@dragonsdawn.net>") (color-theme-shaman "Shaman" "shaman@interdon.net") (color-theme-sitaramv-nt "Sitaram NT" "Sitaram Venkatraman <sitaramv@loc251.tandem.com>") (color-theme-sitaramv-solaris "Sitaram Solaris" "Sitaram Venkatraman <sitaramv@loc251.tandem.com>") (color-theme-snow "Snow" "Nicolas Rist <Nicolas.Rist@alcatel.de>") (color-theme-snowish "Snowish" "Girish Bharadwaj <girishb@gbvsoft.com>") (color-theme-standard-ediff "Standard Ediff" "Emacs Team, added by Alex Schroeder <alex@gnu.org>" t) (color-theme-standard "Standard Emacs 20" "Emacs Team, added by Alex Schroeder <alex@gnu.org>") (color-theme-emacs-21 "Standard Emacs 21" "Emacs Team, added by Alex Schroeder <alex@gnu.org>") (color-theme-emacs-nw "Standard Emacs 21 No Window" "Emacs Team, added by D. Goel <deego@gnufans.org>") (color-theme-xemacs "Standard XEmacs" "XEmacs Team, added by Alex Schroeder <alex@gnu.org>") (color-theme-subtle-blue "Subtle Blue" "Chris McMahan <cmcmahan@one.net>") (color-theme-subtle-hacker "Subtle Hacker" "Colin Walters <levanti@verbum.org>") (color-theme-taming-mr-arneson "Taming Mr Arneson" "Erik Arneson <erik@aarg.net>") (color-theme-taylor "Taylor" "Art Taylor <reeses@hemisphere.org>") (color-theme-tty-dark "TTY Dark" "O Polite <m2@plusseven.com>") (color-theme-vim-colors "Vim Colors" "Michael Soulier <msoulier@biryani.nssg.mitel.com>") (color-theme-whateveryouwant "Whateveryouwant" "Fabien Penso <penso@linuxfr.org>, color by Scott Jaderholm <scott@jaderholm.com>") (color-theme-wheat "Wheat" "Alex Schroeder <alex@gnu.org>") (color-theme-pok-wob "White On Black" "S. Pokrovsky <pok@nbsp.nsk.su>") (color-theme-pok-wog "White On Grey" "S. Pokrovsky <pok@nbsp.nsk.su>") (color-theme-word-perfect "WordPerfect" "Thomas Gehrlein <Thomas.Gehrlein@t-online.de>") (color-theme-xp "XP" "Girish Bharadwaj <girishb@gbvsoft.com>")))) nil [16700 24934]) ("color-theme-backup-original-values" function nil nil [24951 25310]) ("add-hook" code nil nil [25311 25374]) ("color-theme-select" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [25376 27028]) ("easymenu" include nil nil [27030 27049]) ("easy-menu-add-item" code nil nil [27050 27090]) ("easy-menu-add-item" code nil nil [27091 27167]) ("color-theme-mode" function nil nil [27169 29021]) ("color-theme-describe" function (:user-visible-flag t) nil [29067 29386]) ("color-theme-install-at-mouse" function (:user-visible-flag t :arguments ("event")) nil [29388 29679]) ("color-theme-install-at-point" function (:user-visible-flag t) nil [29681 30521]) ("color-theme-install-at-point-for-current-frame" function (:user-visible-flag t) nil [30523 30805]) ("color-theme-filter" function (:arguments ("old-list" "regexp" "&optional" "exclude")) nil [30883 32041]) ("color-theme-spec-filter" function (:arguments ("spec")) nil [32043 32563]) ("color-theme-plist-delete" function (:arguments ("plist" "prop")) nil [32868 33345]) ("if" code nil nil [33668 34621]) ("color-theme-spec-canonical-font" function (:arguments ("atts")) nil [34922 35453]) ("color-theme-spec-resolve-height" function (:arguments ("old" "new")) nil [35912 36572]) ("color-theme-spec-resolve-inheritance" function (:arguments ("atts")) nil [37033 38205]) ("color-theme-spec-maybe-invert" function (:arguments ("atts")) nil [39222 39958]) ("color-theme-spec" function (:arguments ("face")) nil [40522 41354]) ("color-theme-get-params" function nil nil [41356 41821]) ("color-theme-get-vars" function nil nil [41823 42414]) ("color-theme-print-alist" function (:arguments ("alist")) nil [42416 42681]) ("color-theme-get-faces" function nil nil [42683 43156]) ("color-theme-get-face-definitions" function nil nil [43158 43330]) ("color-theme-print-faces" function (:arguments ("faces")) nil [43332 43603]) ("color-theme-reset-faces" function nil nil [43605 44181]) ("color-theme-print-theme" function (:arguments ("func" "doc" "params" "vars" "faces")) nil [44183 44835]) ("color-theme-print" function (:user-visible-flag t :arguments ("&optional" "buf")) nil [44837 46232]) ("color-theme-analyze-find-theme" function (:arguments ("code")) nil [46234 46581]) ("color-theme-analyze-add-face" function (:arguments ("a" "b" "regexp" "faces")) nil [47146 47780]) ("color-theme-analyze-add-faces" function (:arguments ("faces")) nil [48747 52010]) ("color-theme-analyze-remove-heights" function (:arguments ("faces")) nil [52012 52964]) ("color-theme-analyze-defun" function (:user-visible-flag t) nil [53194 55231]) ("color-theme-snapshot" function nil nil [55285 55317]) ("color-theme-make-snapshot" function nil nil [55319 56066]) ("color-theme-frame-param-frobbing-rules" variable (:default-value (quote ((foreground-color default foreground) (background-color default background)))) nil [56128 56458]) ("color-theme-frob-faces" function (:arguments ("params")) nil [56460 56890]) ("color-theme-alist-reduce" function (:arguments ("old-list")) nil [56892 57285]) ("color-theme-install-frame-params" function (:arguments ("params")) nil [57287 59327]) ("color-theme-install-variables" function (:arguments ("vars")) nil [59402 60165]) ("color-theme-install-faces" function (:arguments ("faces")) nil [60167 62169]) ("color-theme-canonic" function (:arguments ("theme")) nil [63106 63683]) ("color-theme-function" function (:arguments ("theme")) nil [63685 63779]) ("color-theme-frame-params" function (:arguments ("theme")) nil [63781 63883]) ("color-theme-variables" function (:arguments ("theme")) nil [63885 63973]) ("color-theme-faces" function (:arguments ("theme")) nil [63975 64059]) ("color-theme-merge-alists" function (:arguments ("&rest" "alists")) nil [64061 64435]) ("color-theme-compare" function (:user-visible-flag t :arguments ("theme-a" "theme-b")) nil [64807 66489]) ("color-theme-install" function (:arguments ("theme")) nil [66524 68240]) ("color-theme-submit" function (:user-visible-flag t) nil [68268 70186]) ("color-theme-gnome" function (:user-visible-flag t) nil [70222 71197]) ("color-theme-blue-gnus" function (:user-visible-flag t) nil [71199 76201]) ("color-theme-dark-gnus" function (:user-visible-flag t) nil [76203 80797]) ("color-theme-blue-eshell" function (:user-visible-flag t) nil [80799 82029]) ("color-theme-salmon-font-lock" function (:user-visible-flag t) nil [82031 83072]) ("color-theme-dark-font-lock" function (:user-visible-flag t) nil [83074 84091]) ("color-theme-dark-info" function (:user-visible-flag t) nil [84093 84636]) ("color-theme-gnome2" function (:user-visible-flag t) nil [84638 89735]) ("color-theme-simple-1" function (:user-visible-flag t) nil [89737 90465]) ("color-theme-jonadabian" function (:user-visible-flag t) nil [90467 92085]) ("color-theme-ryerson" function (:user-visible-flag t) nil [92087 92883]) ("color-theme-wheat" function (:user-visible-flag t) nil [92885 93218]) ("color-theme-standard" function (:user-visible-flag t) nil [93220 107451]) ("color-theme-fischmeister" function (:user-visible-flag t) nil [107453 109294]) ("color-theme-sitaramv-solaris" function (:user-visible-flag t) nil [109296 119437]) ("color-theme-sitaramv-nt" function (:user-visible-flag t) nil [119439 122943]) ("color-theme-billw" function (:user-visible-flag t) nil [122945 134316]) ("color-theme-retro-green" function (:user-visible-flag t :arguments ("&optional" "color" "func")) nil [134318 135516]) ("color-theme-retro-orange" function (:user-visible-flag t) nil [135518 135705]) ("color-theme-subtle-hacker" function (:user-visible-flag t) nil [135707 139851]) ("color-theme-pok-wog" function (:user-visible-flag t) nil [139853 148112]) ("color-theme-pok-wob" function (:user-visible-flag t) nil [148114 156945]) ("color-theme-blue-sea" function (:user-visible-flag t) nil [156947 163918]) ("color-theme-rotor" function (:user-visible-flag t) nil [163920 168418]) ("color-theme-pierson" function (:user-visible-flag t) nil [168420 170199]) ("color-theme-xemacs" function (:user-visible-flag t) nil [170201 174894]) ("color-theme-jsc-light" function (:user-visible-flag t) nil [174896 182861]) ("color-theme-jsc-dark" function (:user-visible-flag t) nil [182863 193192]) ("color-theme-greiner" function (:user-visible-flag t) nil [193194 196738]) ("color-theme-jb-simple" function (:user-visible-flag t) nil [196740 213274]) ("color-theme-beige-diff" function nil nil [213276 214701]) ("color-theme-standard-ediff" function nil nil [214703 216240]) ("color-theme-beige-eshell" function nil nil [216242 217467]) ("color-theme-goldenrod" function (:user-visible-flag t) nil [217469 220337]) ("color-theme-ramangalahy" function (:user-visible-flag t) nil [220339 230605]) ("color-theme-raspopovic" function (:user-visible-flag t) nil [230607 235154]) ("color-theme-taylor" function (:user-visible-flag t) nil [235156 240569]) ("color-theme-marquardt" function (:user-visible-flag t) nil [240571 247423]) ("color-theme-parus" function (:user-visible-flag t) nil [247425 255297]) ("color-theme-high-contrast" function (:user-visible-flag t) nil [255299 257668]) ("color-theme-infodoc" function (:user-visible-flag t) nil [257670 264361]) ("color-theme-classic" function (:user-visible-flag t) nil [264363 270045]) ("color-theme-scintilla" function (:user-visible-flag t) nil [270047 271946]) ("color-theme-gtk-ide" function (:user-visible-flag t) nil [271948 273843]) ("color-theme-midnight" function (:user-visible-flag t) nil [273845 275641]) ("color-theme-jedit-grey" function (:user-visible-flag t) nil [275643 277315]) ("color-theme-snow" function (:user-visible-flag t) nil [277317 283894]) ("color-theme-montz" function (:user-visible-flag t) nil [283896 293281]) ("color-theme-aalto-light" function (:user-visible-flag t) nil [293283 300766]) ("color-theme-aalto-dark" function (:user-visible-flag t) nil [300768 303722]) ("color-theme-blippblopp" function (:user-visible-flag t) nil [303724 307612]) ("color-theme-hober" function (:user-visible-flag t :arguments ("&optional" "preview")) nil [307614 316228]) ("color-theme-bharadwaj" function (:user-visible-flag t) nil [316230 335570]) ("color-theme-oswald" function (:user-visible-flag t) nil [335572 339512]) ("color-theme-salmon-diff" function nil nil [339514 340875]) ("color-theme-robin-hood" function (:user-visible-flag t) nil [340877 342706]) ("color-theme-snowish" function (:user-visible-flag t) nil [342708 356750]) ("color-theme-dark-laptop" function (:user-visible-flag t) nil [356752 365069]) ("color-theme-taming-mr-arneson" function (:user-visible-flag t) nil [365071 373455]) ("color-theme-digital-ofs1" function (:user-visible-flag t) nil [373457 401961]) ("color-theme-mistyday" function (:user-visible-flag t) nil [401963 406119]) ("color-theme-marine" function (:user-visible-flag t) nil [406121 410868]) ("color-theme-blue-erc" function nil nil [410870 413431]) ("color-theme-dark-erc" function (:user-visible-flag t) nil [413433 415992]) ("color-theme-subtle-blue" function (:user-visible-flag t) nil [415994 441335]) ("color-theme-dark-blue" function (:user-visible-flag t) nil [441337 443523]) ("color-theme-jonadabian-slate" function (:user-visible-flag t) nil [443525 450802]) ("color-theme-gray1" function (:user-visible-flag t) nil [450804 454217]) ("color-theme-word-perfect" function (:user-visible-flag t) nil [454219 461629]) ("color-theme-emacs-21" function (:user-visible-flag t) nil [464076 492256]) ("color-theme-jsc-light2" function (:user-visible-flag t) nil [492258 495329]) ("color-theme-ld-dark" function (:user-visible-flag t) nil [495331 509627]) ("color-theme-deep-blue" function (:user-visible-flag t) nil [509629 516730]) ("color-theme-kingsajz" function (:user-visible-flag t) nil [516732 536793]) ("color-theme-comidia" function (:user-visible-flag t) nil [536795 547373]) ("color-theme-katester" function (:user-visible-flag t) nil [547375 548540]) ("color-theme-arjen" function (:user-visible-flag t) nil [548542 560533]) ("color-theme-tty-dark" function (:user-visible-flag t) nil [560535 563418]) ("color-theme-aliceblue" function (:user-visible-flag t) nil [563420 571200]) ("color-theme-black-on-gray" function (:user-visible-flag t) nil [571202 576566]) ("color-theme-dark-blue2" function (:user-visible-flag t) nil [576568 615968]) ("color-theme-blue-mood" function (:user-visible-flag t) nil [615970 622078]) ("color-theme-euphoria" function (:user-visible-flag t) nil [622080 626559]) ("color-theme-resolve" function (:user-visible-flag t) nil [626561 636851]) ("color-theme-xp" function (:user-visible-flag t) nil [636853 646746]) ("color-theme-gray30" function (:user-visible-flag t) nil [646748 657023]) ("color-theme-dark-green" function (:user-visible-flag t) nil [657025 659760]) ("color-theme-whateveryouwant" function (:user-visible-flag t) nil [659762 691038]) ("color-theme-bharadwaj-slate" function (:user-visible-flag t) nil [691040 709899]) ("color-theme-lethe" function (:user-visible-flag t) nil [709901 735385]) ("color-theme-shaman" function (:user-visible-flag t) nil [735387 739900]) ("color-theme-emacs-nw" function (:user-visible-flag t) nil [739902 768354]) ("color-theme-late-night" function (:user-visible-flag t) nil [768356 770904]) ("color-theme-clarity" function (:user-visible-flag t) nil [770906 775736]) ("color-theme-andreas" function (:user-visible-flag t) nil [775738 786395]) ("color-theme-charcoal-black" function (:user-visible-flag t) nil [786397 804375]) ("color-theme-vim-colors" function (:user-visible-flag t) nil [804377 809429]) ("color-theme-calm-forest" function (:user-visible-flag t) nil [809431 818389]) ("color-theme-lawrence" function (:user-visible-flag t) nil [818391 834806]) ("color-theme-matrix" function (:user-visible-flag t) nil [834808 861756]) ("color-theme-feng-shui" function (:user-visible-flag t) nil [861758 864842]) ("color-theme" package nil nil [864844 864866]))
    :file "color-theme.el"
    :pointmax 864897
    )
   (semanticdb-table "htmlize.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("cl" include nil nil [3653 3666]) ("if" code nil nil [3688 3787]) ("font-lock-auto-fontify" variable nil nil [3790 3821]) ("font-lock-support-mode" variable nil nil [3824 3855]) ("global-font-lock-mode" variable nil nil [3858 3888]) ("when" code nil nil [3891 4097]) ("htmlize-version" variable (:constant-flag t :default-value "1.30") nil [4100 4133]) ("condition-case" code nil nil [4260 4319]) ("if" code nil nil [4322 4837]) ("defgroup" code nil nil [4840 4926]) ("htmlize-head-tags" variable (:user-visible-flag t) nil [4928 5064]) ("htmlize-output-type" variable (:user-visible-flag t :default-value (quote css)) nil [5066 5737]) ("htmlize-generate-hyperlinks" variable (:user-visible-flag t :default-value t) nil [5739 6081]) ("htmlize-hyperlink-style" variable (:user-visible-flag t :default-value "
      a {
        color: inherit;
        background-color: inherit;
        font: inherit;
        text-decoration: inherit;
      }
      a:hover {
        text-decoration: underline;
      }
") nil [6083 6407]) ("htmlize-replace-form-feeds" variable (:user-visible-flag t :default-value t) nil [6409 6936]) ("htmlize-html-charset" variable (:user-visible-flag t) nil [6938 8026]) ("htmlize-convert-nonascii-to-entities" variable (:user-visible-flag t :default-value (featurep (quote mule))) nil [8028 9773]) ("htmlize-css-name-prefix" variable (:user-visible-flag t) nil [9775 10155]) ("htmlize-use-rgb-txt" variable (:user-visible-flag t :default-value t) nil [10157 10916]) ("htmlize-html-major-mode" variable nil nil [10918 11228]) ("htmlize-before-hook" variable nil nil [11230 11383]) ("htmlize-after-hook" variable nil nil [11385 11605]) ("htmlize-file-hook" variable nil nil [11607 11714]) ("htmlize-running-xemacs" variable (:constant-flag t :default-value (string-match "XEmacs" emacs-version)) nil [11886 11957]) ("unless" code nil nil [12547 12755]) ("unless" code nil nil [12758 12911]) ("unless" code nil nil [12914 13270]) ("cond" code nil nil [14004 15411]) ("htmlize-basic-character-table" variable (:default-value (let ((table (make-vector 128 0))) (dotimes (i 128) (setf (aref table i) (if (and (>= i 32) (<= i 126)) (char-to-string i) (format "&#%d;" i)))) (setf (aref table 10) "
" (aref table 13) "" (aref table 9) "	" (aref table 38) "&amp;" (aref table 60) "&lt;" (aref table 62) "&gt;") table)) nil [15485 16401]) ("htmlize-extended-character-cache" variable (:default-value (make-hash-table :test (quote eq))) nil [16986 17055]) ("htmlize-protect-string" function (:arguments ("string")) nil [17057 18510]) ("htmlize-ellipsis" variable (:constant-flag t :default-value "...") nil [18512 18545]) ("put-text-property" code nil nil [18546 18630]) ("htmlize-buffer-substring-no-invisible" function (:arguments ("beg" "end")) nil [18632 20883]) ("htmlize-trim-ellipsis" function (:arguments ("text")) nil [20885 21244]) ("htmlize-tab-spaces" variable (:constant-flag t :default-value (let ((v (make-vector 32 nil))) (dotimes (i (length v)) (setf (aref v i) (make-string i 32))) v)) nil [21246 21513]) ("htmlize-untabify" function (:arguments ("text" "start-column")) nil [21515 22925]) ("htmlize-despam-address" function (:arguments ("string")) nil [22927 23254]) ("htmlize-make-hyperlinks" function nil nil [23256 24177]) ("htmlize-defang-local-variables" function nil nil [24466 24898]) ("if" code nil nil [24925 25166]) ("htmlize-x-library-search-path" variable (:default-value (quote ("/usr/X11R6/lib/X11/" "/usr/X11R5/lib/X11/" "/usr/lib/X11R6/X11/" "/usr/lib/X11R5/X11/" "/usr/local/X11R6/lib/X11/" "/usr/local/X11R5/lib/X11/" "/usr/local/lib/X11R6/X11/" "/usr/local/lib/X11R5/X11/" "/usr/X11/lib/X11/" "/usr/lib/X11/" "/usr/local/lib/X11/" "/usr/X386/lib/X11/" "/usr/x386/lib/X11/" "/usr/XFree86/lib/X11/" "/usr/unsupported/lib/X11/" "/usr/athena/lib/X11/" "/usr/local/x11r5/lib/X11/" "/usr/lpp/Xamples/lib/X11/" "/usr/openwin/lib/X11/" "/usr/openwin/share/lib/X11/"))) nil [25168 25772]) ("htmlize-get-color-rgb-hash" function (:arguments ("&optional" "rgb-file")) nil [25774 26977]) ("htmlize-color-rgb-hash" variable (:default-value (htmlize-get-color-rgb-hash)) nil [27128 27188]) ("htmlize-face-specifies-property" function (:arguments ("face" "prop")) nil [27211 27771]) ("htmlize-face-color-internal" function (:arguments ("face" "fg")) nil [27773 29175]) ("htmlize-face-foreground" function (:arguments ("face")) nil [29177 29559]) ("htmlize-face-background" function (:arguments ("face")) nil [29561 29945]) ("htmlize-color-to-rgb" function (:arguments ("color")) nil [30049 31430]) ("htmlize-fstruct" type (:members ("foreground" "background" "boldp" "italicp" "underlinep" "overlinep" "strikep" "css-name") :type "struct") nil [31842 32200]) ("htmlize-face-emacs21-attr" function (:arguments ("fstruct" "attr" "value")) nil [32202 33094]) ("htmlize-face-to-fstruct" function (:arguments ("face")) nil [33096 36149]) ("htmlize-attrlist-to-fstruct" function (:arguments ("attrlist")) nil [36483 37301]) ("htmlize-face-list-p" function (:arguments ("face-prop")) nil [37303 38258]) ("htmlize-make-face-map" function (:arguments ("faces")) nil [38260 39221]) ("htmlize-unstringify-face" function (:arguments ("face")) nil [39223 39389]) ("htmlize-faces-in-buffer" function nil nil [39391 41284]) ("cond" code nil nil [41631 44328]) ("htmlize-method" function (:arguments ("method" "&rest" "args")) nil [45190 45401]) ("htmlize-method-function" function (:arguments ("method")) nil [45403 45695]) ("htmlize-css-doctype" function nil nil [45729 45842]) ("htmlize-css-specs" function (:arguments ("fstruct")) nil [45880 46698]) ("htmlize-css-insert-head" function (:arguments ("buffer-faces" "face-map")) nil [46700 47954]) ("htmlize-css-insert-text" function (:arguments ("text" "fstruct-list" "buffer")) nil [47956 48464]) ("htmlize-font-doctype" function nil nil [48505 49874]) ("htmlize-font-body-tag" function (:arguments ("face-map")) nil [49876 50097]) ("htmlize-font-insert-text" function (:arguments ("text" "fstruct-list" "buffer")) nil [50099 51479]) ("htmlize-buffer-1" function nil nil [51482 56236]) ("htmlize-with-fontify-message" function (:arguments ("&rest" "body")) nil [56261 56733]) ("htmlize-ensure-fontified" function nil nil [56735 57985]) ("htmlize-buffer" function (:user-visible-flag t :arguments ("&optional" "buffer")) nil [58004 58894]) ("htmlize-region" function (:user-visible-flag t :arguments ("beg" "end")) nil [58911 59362]) ("htmlize-make-file-name" function (:arguments ("file")) nil [59364 59854]) ("htmlize-file" function (:user-visible-flag t :arguments ("file" "&optional" "target")) nil [60272 62927]) ("htmlize-many-files" function (:user-visible-flag t :arguments ("files" "&optional" "target-directory")) nil [62944 64241]) ("htmlize-many-files-dired" function (:user-visible-flag t :arguments ("arg" "&optional" "target-directory")) nil [64258 64448]) ("htmlize" package nil nil [64450 64468]))
    :file "htmlize.el"
    :pointmax 64495
    )
   (semanticdb-table "rcov.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("rcov-xref-before-visit-source-hook" variable nil nil [176 254]) ("rcov-xref-after-visit-source-hook" variable nil nil [255 331]) ("rcov-command-line" variable (:default-value "rake rcov:test RCOVOPTS='--gcc --no-html'") nil [332 598]) ("rcovsave-command-line" variable (:default-value "rake rcov RCOVOPTS='--gcc --no-html --save=coverage.info'") nil [599 766]) ("rcovdiff-command-line" variable (:default-value "rake rcov RCOVOPTS='-D --gcc --no-html'") nil [767 919]) ("define-derived-mode" code nil nil [941 1553]) ("rcov-xref-tag-regexp" variable (:default-value "\\[\\[\\(.*?\\)\\]\\]") nil [1557 1610]) ("rcov-xref-next-tag" function (:user-visible-flag t :arguments ("n")) nil [1612 1874]) ("rcov-xref-previous-tag" function (:user-visible-flag t :arguments ("n")) nil [1876 2031]) ("rcov-xref-link-tempbuffer" variable (:default-value " *rcov-link*") nil [2033 2082]) ("rcov-xref-show-link" function nil nil [2083 2917]) ("rcov-xref-extract-file-lines" function (:arguments ("line")) nil [2951 3578]) ("rcov-xref-select-file-line" function (:arguments ("candidates")) nil [3580 3849]) ("rcov-xref-visit-source" function (:user-visible-flag t) nil [3851 4517]) ("rcov-internal" function (:arguments ("cmdline")) nil [4559 4711]) ("rcov" function (:user-visible-flag t) nil [4713 4817]) ("rcovsave" function (:user-visible-flag t) nil [4819 4932]) ("rcovdiff" function (:user-visible-flag t) nil [4934 5050]) ("rcov" package nil nil [5052 5067]))
    :file "rcov.el"
    :pointmax 5068
    )
   (semanticdb-table "autotest.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("shell" include nil nil [263 279]) ("autotest" function (:user-visible-flag t) nil [281 1216]) ("autotest-switch" function (:user-visible-flag t) nil [1218 1434]) ("if" code nil nil [1436 2594]) ("autotest" package nil nil [2596 2615]))
    :file "autotest.el"
    :pointmax 2616
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre3"
  :semanticdb-version "2.0pre3"
  )
